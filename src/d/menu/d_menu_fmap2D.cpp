//
// Generated By: dol2asm
// Translation Unit: d/menu/d_menu_fmap2D
//

#include "d/menu/d_menu_fmap2D.h"
#include "JSystem/J2DGraph/J2DAnmLoader.h"
#include "JSystem/J2DGraph/J2DOrthoGraph.h"
#include "JSystem/J2DGraph/J2DScreen.h"
#include "JSystem/JKernel/JKRExpHeap.h"
#include "JSystem/JUtility/JUTTexture.h"
#include "SSystem/SComponent/c_math.h"
#include "d/a/d_a_player.h"
#include "d/com/d_com_inf_game.h"
#include "d/d_lib.h"
#include "d/meter/d_meter2_info.h"
#include "d/meter/d_meter_HIO.h"
#include "d/msg/d_msg_class.h"
#include "d/msg/d_msg_scrn_explain.h"
#include "dol2asm.h"
#include "m_Do/m_Do_graphic.h"

//
// Forward References:
//

extern "C" void __ct__18dMenu_Fmap2DBack_cFv();
extern "C" void __dt__18dMenu_Fmap2DBack_cFv();
extern "C" void draw__18dMenu_Fmap2DBack_cFv();
extern "C" void setRegionTexData__18dMenu_Fmap2DBack_cFUcP7ResTIMGfffffffff();
extern "C" void calcAllMapPos__18dMenu_Fmap2DBack_cFv();
extern "C" void calcAllMapScaleRate__18dMenu_Fmap2DBack_cFv();
extern "C" void calcAllMapPos2DFirst__18dMenu_Fmap2DBack_cFffPfPf();
extern "C" void calcAllMapPos2D__18dMenu_Fmap2DBack_cFffPfPf();
extern "C" void calcAllMapPos2D__18dMenu_Fmap2DBack_cFPCcffPfPf();
extern "C" void calcAllMapPos2D__18dMenu_Fmap2DBack_cFffPfPffff();
extern "C" void calcAllMapPosWorld__18dMenu_Fmap2DBack_cFffPfPf();
extern "C" void setSpotPane__18dMenu_Fmap2DBack_cFP7ResTIMG();
extern "C" void deleteSpotPane__18dMenu_Fmap2DBack_cFv();
extern "C" void zoomMapCalc__18dMenu_Fmap2DBack_cFf();
extern "C" void zoomMapCalc2__18dMenu_Fmap2DBack_cFf();
extern "C" void zoomMapCalcHIO__18dMenu_Fmap2DBack_cFv();
extern "C" void scrollCalc__18dMenu_Fmap2DBack_cFf();
extern "C" void mapBlink__18dMenu_Fmap2DBack_cFPs();
extern "C" void setSpotCursor__18dMenu_Fmap2DBack_cFUc();
extern "C" void allmap_move2__18dMenu_Fmap2DBack_cFP9STControl();
extern "C" void setIcon2DPos__18dMenu_Fmap2DBack_cFUcfffUcb();
extern "C" void setIcon2DPos__18dMenu_Fmap2DBack_cFUcPCcfffUcb();
extern "C" void setIcon2DPos__18dMenu_Fmap2DBack_cFUcUcPCcfffUcb();
extern "C" void isShowRegion__18dMenu_Fmap2DBack_cFi();
extern "C" void getMapAreaGlobalPosX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapAreaGlobalPosY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapAreaGlobalCenterPosX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapAreaGlobalCenterPosY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapAreaSizeX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapAreaSizeY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaLX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaLY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaSizeX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaSizeRealX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaCenterPosX__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaCenterPosY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaSizeY__18dMenu_Fmap2DBack_cFv();
extern "C" void getMapScissorAreaSizeRealY__18dMenu_Fmap2DBack_cFv();
extern "C" void calcRenderingPos__18dMenu_Fmap2DBack_cFv();
extern "C" void calcRenderingScale__18dMenu_Fmap2DBack_cFv();
extern "C" void getPathScale__18dMenu_Fmap2DBack_cFf();
extern "C" void getAllMapZoomRate__18dMenu_Fmap2DBack_cFv();
extern "C" void getRegionMapZoomRate__18dMenu_Fmap2DBack_cFi();
extern "C" void getSpotMapZoomRate__18dMenu_Fmap2DBack_cFv();
extern "C" void getStageOriginPath__18dMenu_Fmap2DBack_cFUcPfPf();
extern "C" void calcOffset__18dMenu_Fmap2DBack_cFUcPCcPfPf();
extern "C" void regionTextureDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void stageTextureDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void worldGridDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void regionGridDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void worldOriginDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void scrollAreaDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void regionOriginDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void stageOriginDraw__18dMenu_Fmap2DBack_cFv();
extern "C" void calcBlink__18dMenu_Fmap2DBack_cFv();
extern "C" void calcBackAlpha__18dMenu_Fmap2DBack_cFb();
extern "C" void btkAnimeLoop__18dMenu_Fmap2DBack_cFf();
extern "C" void setBaseBackAlpha__18dMenu_Fmap2DBack_cFUc();
extern "C" void regionMapMove__18dMenu_Fmap2DBack_cFP9STControl();
extern "C" void stageMapMove__18dMenu_Fmap2DBack_cFP9STControlUcb();
extern "C" void setAllAlphaRate__18dMenu_Fmap2DBack_cFfb();
extern "C" void drawDebugStageArea__18dMenu_Fmap2DBack_cFv();
extern "C" void drawDebugRegionArea__18dMenu_Fmap2DBack_cFv();
extern "C" void setArrowPos3D__18dMenu_Fmap2DBack_cFUcPCcff();
extern "C" void setArrowPos3DOffset__18dMenu_Fmap2DBack_cFUcPCcfff();
extern "C" void calcDrawPriority__18dMenu_Fmap2DBack_cFv();
extern "C" void setArrowPosAxis__18dMenu_Fmap2DBack_cFff();
extern "C" void __ct__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl();
extern "C" void __dt__17dMenu_Fmap2DTop_cFv();
extern "C" void _execute__17dMenu_Fmap2DTop_cFv();
extern "C" void setAllAlphaRate__17dMenu_Fmap2DTop_cFfb();
extern "C" void draw__17dMenu_Fmap2DTop_cFv();
extern "C" void btkAnimeLoop__17dMenu_Fmap2DTop_cFP19J2DAnmTextureSRTKeyf();
extern "C" void setMoyaAlpha__17dMenu_Fmap2DTop_cFUc();
extern "C" void setTitleNameString__17dMenu_Fmap2DTop_cFUl();
extern "C" void setAreaNameString__17dMenu_Fmap2DTop_cFUl();
extern "C" void setZButtonString__17dMenu_Fmap2DTop_cFUlUc();
extern "C" void setBButtonString__17dMenu_Fmap2DTop_cFUlUc();
extern "C" void setAButtonString__17dMenu_Fmap2DTop_cFUlUc();
extern "C" void setCrossLRString__17dMenu_Fmap2DTop_cFUl();
extern "C" void set3DStickString__17dMenu_Fmap2DTop_cFUl();
extern "C" void createExplain__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl();
extern "C" void deleteExplain__17dMenu_Fmap2DTop_cFv();
extern "C" void setArrowAlphaRatio__17dMenu_Fmap2DTop_cFUcf();
extern "C" void setAlphaAnimeMin__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha();
extern "C" void setAlphaAnimeMid__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha();
extern "C" void setAlphaAnimeMax__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha();
extern "C" void checkPlayerWarpAccept__17dMenu_Fmap2DTop_cFv();
extern "C" void checkWarpAcceptRegion__17dMenu_Fmap2DTop_cFi();
extern "C" void checkWarpAcceptRegion4__17dMenu_Fmap2DTop_cFv();
extern "C" void checkWarpAcceptCannon__17dMenu_Fmap2DTop_cFv();
extern "C" void setHIO__17dMenu_Fmap2DTop_cFb();
extern "C" void isWarpAccept__17dMenu_Fmap2DTop_cFv();
extern "C" static void func_801D810C();
extern "C" extern char const* const d_menu_d_menu_fmap2D__stringBase0;

//
// External References:
//

extern "C" void mDoExt_setCurrentHeap__FP7JKRHeap();
extern "C" void mDoExt_getMesgFont__Fv();
extern "C" void mDoExt_getRubyFont__Fv();
extern "C" void dComIfGs_isStageSwitch__Fii();
extern "C" void dComIfGp_getNowLevel__Fv();
extern "C" void isRegionBit__33dSv_player_field_last_stay_info_cCFi();
extern "C" void isEventBit__11dSv_event_cCFUs();
extern "C" void __ct__16dMenuMapCommon_cFv();
extern "C" void __dt__16dMenuMapCommon_cFv();
extern "C" void initiate__16dMenuMapCommon_cFP10JKRArchive();
extern "C" void drawIcon__16dMenuMapCommon_cFffff();
extern "C" void setIconInfo__16dMenuMapCommon_cFUcfffffUc();
extern "C" void blinkMove__16dMenuMapCommon_cFs();
extern "C" void moveLightDropAnime__16dMenuMapCommon_cFv();
extern "C" void getPointStagePathInnerNo__15renderingFmap_cFP24dMenu_Fmap_region_data_cffiPiPi();
extern "C" void __ct__14dMeterHaihai_cFUc();
extern "C" void drawHaihai__14dMeterHaihai_cFUc();
extern "C" void getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void dMeter2Info_getPixel__FffffffPC7ResTIMG();
extern "C" void __ct__17dMsgScrnExplain_cFP9STControlUcbUc();
extern "C" void draw__17dMsgScrnExplain_cFP13J2DOrthoGraph();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void __ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void hide__13CPaneMgrAlphaFv();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
extern "C" void __ct__17CPaneMgrAlphaMorfFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void setBackupAlpha__17CPaneMgrAlphaMorfFv();
extern "C" void setAlphaMorfRate__17CPaneMgrAlphaMorfFf();
extern "C" void cLib_addCalc2__FPffff();
extern "C" void seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
extern "C" void func_802E90C0();
extern "C" void J2DDrawLine__FffffQ28JUtility6TColori();
extern "C" void J2DFillBox__FffffQ28JUtility6TColor();
extern "C" void J2DDrawFrame__FffffQ28JUtility6TColorUc();
extern "C" void rotate__7J2DPaneFff13J2DRotateAxisf();
extern "C" void getParentPane__7J2DPaneFv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
extern "C" void animation__9J2DScreenFv();
extern "C" void __ct__10J2DPictureFPC7ResTIMG();
extern "C" void getStringPtr__10J2DTextBoxCFv();
extern "C" void setString__10J2DTextBoxFsPCce();
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
extern "C" void _savegpr_23();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_23();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" u8 saveBitLabels__16dSv_event_flag_c[1644 + 4 /* padding */];
extern "C" u8 sincosTable___5JMath[65536];
extern "C" u8 m_midnaActor__9daPy_py_c[4];
extern "C" u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

//
// Declarations:
//

/* 803965D0-803965D0 022C30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */

/* 803BD750-803BD760 01A870 0010+00 2/2 0/0 0/0 .data            __vt__17dMenu_Fmap2DTop_c */
SECTION_DATA extern void* __vt__17dMenu_Fmap2DTop_c[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)draw__17dMenu_Fmap2DTop_cFv,
    (void*)__dt__17dMenu_Fmap2DTop_cFv,
};

/* 803BD760-803BD780 01A880 001C+04 2/2 0/0 0/0 .data            __vt__18dMenu_Fmap2DBack_c */
SECTION_DATA extern void* __vt__18dMenu_Fmap2DBack_c[7 + 1 /* padding */] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)draw__18dMenu_Fmap2DBack_cFv,
    (void*)NULL,
    (void*)NULL,
    (void*)func_801D810C,
    (void*)__dt__18dMenu_Fmap2DBack_cFv,
    /* padding */
    NULL,
};

/* ############################################################################################## */
/* 80396248-80396268 0228A8 0020+00 2/2 0/0 0/0 .rodata          cur_tag$3868 */
SECTION_RODATA static u8 const cur_tag_3868[32] = {
    0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x72, 0x75, 0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x72, 0x64,
    0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x6C, 0x64, 0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x6C, 0x75,
};
COMPILER_STRIP_GATE(0x80396248, &cur_tag_3868);

/* 804541D0-804541D4 0027D0 0004+00 21/21 0/0 0/0 .sdata2          @3970 */
SECTION_SDATA2 static u8 lit_3970[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 804541D4-804541D8 0027D4 0004+00 14/14 0/0 0/0 .sdata2          @3971 */
SECTION_SDATA2 static f32 lit_3971 = 1.0f;

/* 804541D8-804541DC 0027D8 0004+00 2/2 0/0 0/0 .sdata2          @3972 */
SECTION_SDATA2 static f32 lit_3972 = 360.0f;

#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803965D0 = "zelda_map_screen_stone_base.blo";
SECTION_DEAD static char const* const stringBase_803965F0 = "zelda_map_screen_base.blo";
SECTION_DEAD static char const* const stringBase_8039660A = "zelda_map_screen_base.btk";
SECTION_DEAD static char const* const stringBase_80396624 = "tt_block8x8.bti";
SECTION_DEAD static char const* const stringBase_80396634 = "zelda_field_map_point_cursor.blo";
#pragma pop

/* 801CF56C-801CFCDC 1C9EAC 0770+00 0/0 1/1 0/0 .text            __ct__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
dMenu_Fmap2DBack_c::dMenu_Fmap2DBack_c() {
    dMeter2Info_setMapDrugFlag(0);

    for (int i = 0; i < 8; i++) {
        mpAreaTex[i] = NULL;
        field_0xe8c[i] = 0.0;
        field_0xeac[i] = 0.0;
        field_0xecc[i] = 0.0;
        field_0xeec[i] = 0.0;
        field_0xf0c[i] = 0.0;
        field_0xf2c[i] = 0.0;
        field_0xf4c[i] = 0.0;
        field_0xf6c[i] = 0.0;
        field_0x1004[i] = 0.0;
        field_0x1024[i] = 0.0;
        field_0xce8[i].field_0x0 = 0.0;
        field_0xce8[i].field_0x4 = 0.0;
        field_0xce8[i].field_0x8 = 0.0;
        field_0xce8[i].field_0xc = 0.0;
        field_0xce8[i].field_0x10 = 0.0;
        field_0x121c[i] = 0xff;
        field_0x1230[i] = 0xff;
        field_0xd8c[i] = 0.0;
        field_0xdac[i] = 0.0;
        field_0xdcc[i] = 0.0;
        field_0xdec[i] = 0.0;
        field_0xe0c[i] = 0.0;
        field_0xe2c[i] = 0.0;
        field_0xe4c[i] = 0.0;
        field_0xe6c[i] = 0.0;
    }

    for (int i = 0; i < 20; i++) {
        field_0x1044[i] = 0.0;
        field_0x1094[i] = 0.0;
        field_0x10e4[i] = 0.0;
        field_0x1134[i] = 0.0;
    }

    mpStages = NULL;
    field_0xfe0 = 0.0;
    field_0xfe4 = 0.0;
    field_0xfe8 = 0.0;
    field_0xfec = 0.0;
    mAllMapScaleRate = 0.0;
    field_0xff4 = 0.0;
    field_0xff8 = 0.0;
    field_0xffc = 0.0;
    field_0x1000 = 0.0;
    field_0x1184 = 0.0;
    field_0x1188 = 0.0;
    field_0xf8c = 0.0;
    field_0xf90 = 0.0;
    field_0xf94 = 1.0;
    field_0xf98 = 1.0;
    field_0xfa0 = 0.0;
    field_0xf9c = getAllMapZoomRate();
    field_0xfa4 = 1.0;
    field_0xfa8 = 0.0;
    mpBackTex = NULL;
    mpSpotTexture = NULL;
    field_0xfbc = 0.0;
    field_0xfc0 = 0.0;
    field_0xfc4 = 0.0;
    field_0xcdc = 0;
    mpMeterHaihai = NULL;
    field_0x122d = 0;
    field_0x122e = 0;
    field_0x1224 = 0;
    field_0x1225 = 0;
    field_0xfc8 = 0.0;
    field_0xfcc = 0.0;
    field_0xfd0 = 0.0;
    field_0xfd4 = 0.0;
    field_0xfd8 = 0.0;
    field_0xfdc = 0.0;
    control_ypos = 0.0;
    control_xpos = 0.0;
    field_0x11b4 = 0.0;
    field_0x11b8 = 0.0;
    field_0x11bc = 0.0;
    field_0x11c0 = 0.0;
    field_0x11c4 = 0.0;
    field_0x11c8 = 0.0;
    field_0x11cc = 0.0;
    field_0x11d0 = 0.0;
    mRegionFlag = 0;
    field_0x1239 = 0;
    field_0x1238 = 0;
    field_0x1218 = 0;
    field_0x121a = 0;
    field_0x1226 = 0xff;
    field_0x1227 = 0;
    field_0x1228 = 0;
    field_0x1229 = 0;
    field_0x122a = 0;
    field_0x122b = 1;
    field_0xfb0 = 0.0;
    field_0xfb4 = 0.0;
    field_0xfb8 = 1.0;
    field_0x11d4 = 0.0;
    field_0x1190 = 0.0;
    field_0x118c = 0.0;
    field_0x11a8 = 0.0;
    field_0x11a4 = 0.0;
    field_0x11b0 = 0.0;
    field_0x11ac = 0.0;
    field_0x1198 = 0.0;
    field_0x1194 = 0.0;
    field_0x11d8 = 0.0;
    field_0x11dc = 0.0;
    field_0x11e0 = 360.0;
    field_0x11e4 = 0.0;
    field_0x11e8 = 0.0;
    field_0x11ec = 0.0;

    field_0x11f0.set(0, 0, 0, 0);
    field_0x11f4.set(255, 255, 255, 255);
    field_0x11f8.set(0, 0, 0, 0);
    field_0x11fc.set(255, 255, 255, 255);
    field_0x1200.set(0, 0, 0, 0);
    field_0x1204.set(0, 0, 0, 255);
    field_0x1208.set(0, 0, 0, 0);
    field_0x120c.set(0, 0, 0, 255);

    field_0x1210 = 1.0;
    field_0x1214 = 1.0;
    mArrowDrawFlag = 1;
    field_0x122f = 0;

    initiate(dComIfGp_getFmapResArchive());

    mpBackScreen = new J2DScreen();
    JUT_ASSERT(238, mpBackScreen != 0);

    bool fg = mpBackScreen->setPriority("zelda_map_screen_stone_base.blo", 0x20000,
                                        dComIfGp_getFmapResArchive());
    JUT_ASSERT(242, fg != false);

    dPaneClass_showNullPane(mpBackScreen);

    mpBaseScreen = new J2DScreen();
    JUT_ASSERT(248, mpBaseScreen != 0)

    fg = mpBaseScreen->setPriority("zelda_map_screen_base.blo", 0x20000,
                                   dComIfGp_getFmapResArchive());
    JUT_ASSERT(252, fg != false);

    dPaneClass_showNullPane(mpBaseScreen);

    mpBaseAnm = J2DAnmLoaderDataBase::load(
        JKRGetNameResource("zelda_map_screen_base.btk", dComIfGp_getFmapResArchive()));
    mpBaseAnm->searchUpdateMaterialID(mpBaseScreen);

    field_0xfac = 0.0;

    mpBaseRoot = new CPaneMgrAlphaMorf(mpBaseScreen, 'ROOT', 2, NULL);
    JUT_ASSERT(264, mpBaseRoot != 0);

    mpMapArea = new CPaneMgr(mpBaseScreen, 'center_n', 0, NULL);
    JUT_ASSERT(269, mpMapArea != 0);

    mpMapBlack = new CPaneMgr(mpBaseScreen, 'map_blak', 0, NULL);
    JUT_ASSERT(273, mpMapBlack != 0);

    mpMeterHaihai = new dMeterHaihai_c(1);
    JUT_ASSERT(277, mpMeterHaihai != 0);

    ResTIMG* backTexResource =
        (ResTIMG*)dComIfGp_getMain2DArchive()->getResource('TIMG', "tt_block8x8.bti");
    mpBackTex = new J2DPicture(backTexResource);
    JUT_ASSERT(282, mpBackTex != 0);

    mpBackTex->setBlackWhite(JUtility::TColor(0, 0, 0, 0), JUtility::TColor(0, 0, 0, 255));
    mpBackTex->setAlpha(0);

    mpPointScreen = new J2DScreen();
    JUT_ASSERT(293, mpPointScreen != 0);

    fg = mpPointScreen->setPriority("zelda_field_map_point_cursor.blo", 0x20000,
                                    dComIfGp_getFmapResArchive());
    JUT_ASSERT(252, fg != false);

    dPaneClass_showNullPane(mpPointScreen);

    mpPointParent = new CPaneMgr(mpPointScreen, 'f_po_n', 2, NULL);
    JUT_ASSERT(301, mpPointParent != 0);

    mpPointParent->scale(g_fmapHIO.mCursorScale, g_fmapHIO.mCursorScale);

    static const u64 cur_tag[4] = {'f_po_ru', 'f_po_rd', 'f_po_ld', 'f_po_lu'};

    for (int i = 0; i < 4; i++) {
        J2DPicture* picture = static_cast<J2DPicture*>(mpPointScreen->search(cur_tag[i]));
        picture->setBlackWhite(g_fmapHIO.mCursorBlack, g_fmapHIO.mCursorWhite);
    }

    dMeter2Info_set2DWidth(getMapScissorAreaSizeX());
    dMeter2Info_set2DHeight(getMapScissorAreaSizeY());
    dMeter2Info_set2DPosH(getMapScissorAreaLX());
    dMeter2Info_set2DPosV(getMapScissorAreaLY());
    setDebugData(NULL, NULL, 0);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __ct__18dMenu_Fmap2DBack_cFv(){nofralloc
#include "asm/d/menu/d_menu_fmap2D/__ct__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801CFCDC-801CFF34 1CA61C 0258+00 2/1 0/0 0/0 .text            __dt__18dMenu_Fmap2DBack_cFv */
dMenu_Fmap2DBack_c::~dMenu_Fmap2DBack_c() {
    delete mpBackScreen;
    mpBackScreen = NULL;

    delete mpBaseScreen;
    mpBaseScreen = NULL;

    delete mpBaseAnm;
    mpBaseAnm = NULL;

    delete mpBaseRoot;
    mpBaseRoot = NULL;

    delete mpMapArea;
    mpMapArea = NULL;

    delete mpMapBlack;
    mpMapBlack = NULL;

    delete mpMeterHaihai;
    mpMeterHaihai = NULL;

    delete mpBackTex;
    mpBackTex = NULL;

    delete mpPointScreen;
    mpPointScreen = NULL;

    delete mpPointParent;
    mpPointParent = NULL;

    for (int i = 0; i < 8; i++) {
        if (mpAreaTex[i] != NULL) {
            delete mpAreaTex[i];
            mpAreaTex[i] = NULL;
        }
    }

    deleteSpotPane();
    dMeter2Info_setMapDrugFlag(0);
}

/* 80396268-80396288 0228C8 0020+00 1/1 0/0 0/0 .rodata          cur_tag$4092 */
SECTION_RODATA static u8 const cur_tag_4092[32] = {
    0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x72, 0x75, 0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x72, 0x64,
    0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x6C, 0x64, 0x00, 0x66, 0x5F, 0x70, 0x6F, 0x5F, 0x6C, 0x75,
};
COMPILER_STRIP_GATE(0x80396268, &cur_tag_4092);

/* 804541DC-804541E0 0027DC 0004+00 6/6 0/0 0/0 .sdata2          @4199 */
SECTION_SDATA2 static f32 lit_4199 = 608.0f;

/* 804541E0-804541E4 0027E0 0004+00 5/5 0/0 0/0 .sdata2          @4200 */
SECTION_SDATA2 static f32 lit_4200 = 448.0f;

/* 804541E4-804541E8 0027E4 0004+00 4/4 0/0 0/0 .sdata2          @4201 */
SECTION_SDATA2 static f32 lit_4201 = 255.0f;

/* 804541E8-804541EC 0027E8 0004+00 18/18 0/0 0/0 .sdata2          @4202 */
SECTION_SDATA2 static f32 lit_4202 = 0.5f;

/* 804541EC-804541F0 0027EC 0004+00 2/2 0/0 0/0 .sdata2          @4203 */
SECTION_SDATA2 static f32 lit_4203 = 2.0f;

/* 804541F0-804541F4 0027F0 0004+00 5/5 0/0 0/0 .sdata2          @4204 */
SECTION_SDATA2 static f32 lit_4204 = 3.0f;

/* 804541F4-804541F8 0027F4 0004+00 6/6 0/0 0/0 .sdata2          @4205 */
SECTION_SDATA2 static f32 lit_4205 = 6.0f;

/* 804541F8-80454200 0027F8 0008+00 4/4 0/0 0/0 .sdata2          @4207 */
SECTION_SDATA2 static f64 lit_4207 = 4503599627370496.0 /* cast u32 to float */;

/* ############################################################################################## */

/* 801CFF34-801D0804 1CA874 08D0+00 1/0 0/0 0/0 .text            draw__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::draw() {
    calcBlink();

    J2DGrafContext* grafPort = dComIfGp_getCurrentGrafPort();

    grafPort->setup2D();

    u32 scissorLeft, scissorTop, scissorWidth, scissorHeight;
    GXGetScissor(&scissorLeft, &scissorTop, &scissorWidth, &scissorHeight);

    grafPort->scissor(field_0xfbc, 0.0f, 608.0f, 448.0f);
    grafPort->setScissor();

    mpBackTex->setBlackWhite(field_0x1208, field_0x120c);
    mpBackTex->setAlpha(field_0xfc4 * 255.0f * g_fmapHIO.mBackgroundAlpha);
    mpBackTex->draw(field_0xfbc + mDoGph_gInf_c::getMinXF(),
                    field_0xfc0 + mDoGph_gInf_c::getMinYF(), mDoGph_gInf_c::getWidthF(),
                    mDoGph_gInf_c::getHeightF(), false, false, false);

    mpBackScreen->draw(field_0xfbc, field_0xfc0, grafPort);
    mpBaseScreen->draw(field_0xfbc, field_0xfc0, grafPort);

    Mtx mtx;
    Vec vec1 = mpMapArea->getGlobalVtx(&mtx, 0, false, 0);

    Vec vec2 = mpMapArea->getGlobalVtx(&mtx, 3, false, 0);

    f32 width = mDoGph_gInf_c::getWidthF() / 608.0f;
    f32 height = mDoGph_gInf_c::getHeightF() / 448.0f;

    grafPort->scissor(field_0xfbc + ((vec1.x - mDoGph_gInf_c::getMinXF()) / width),
                      field_0xfc0 + (vec1.y / height), (vec2.x - vec1.x) / width,
                      (vec2.y - vec1.y) / height);

    grafPort->setScissor();

    field_0x11dc = (field_0xfbc + getMapScissorAreaLX()) + (getMapScissorAreaSizeRealX() * 0.5f);

    if (g_fmapHIO.mRangeCheck && g_fmapHIO.mRangeCheckDrawPriority) {
        drawDebugRegionArea();
    }

    regionTextureDraw();

    if (g_fmapHIO.mRangeCheck && g_fmapHIO.mRangeCheckDrawPriority) {
        drawDebugStageArea();
    }

    if (field_0x1239 && mpSpotTexture) {
        if (g_fmapHIO.mDisplayRegionGrid && g_fmapHIO.mRegionGridWidth > 0.0f) {
            regionGridDraw();
        }

        stageTextureDraw();

        if (g_fmapHIO.mDisplayStageOrigin) {
            stageOriginDraw();
        }
    }

    if (g_fmapHIO.mDisplayRegionOrigin) {
        regionOriginDraw();
    }

    if (g_fmapHIO.mDisplayWorldGrid && g_fmapHIO.mWorldGridWidth > 0.0f) {
        worldGridDraw();
    }

    if (g_fmapHIO.mDisplayWorldOrigin) {
        worldOriginDraw();
    }

    if (g_fmapHIO.mScrollRangeDisplay) {
        scrollAreaDraw();
    }

    blinkMove(30);
    moveLightDropAnime();
    setCenterPosX(field_0x11dc, 1);
    drawIcon(field_0xfbc, field_0xfc0, field_0xfc4, field_0xfa8 * field_0x11d8);

    if (g_fmapHIO.mRangeCheck && !g_fmapHIO.mRangeCheckDrawPriority) {
        drawDebugRegionArea();
    }

    grafPort->scissor(scissorLeft, scissorTop, scissorWidth, scissorHeight);
    grafPort->setScissor();

    if (isArrowDrawFlag()) {
        f32 fVar2 = 0.0f;
        f32 fVar3 = 0.0f;
        f32 fVar4, fVar5;

        if (field_0xfa0 > 1.0f && field_0xfa0 < 2.0f) {
            f32 tmp = 2.0f - field_0xfa0;
            if (field_0x11a4 != 0.0f) {
                fVar2 = field_0x11a4 * tmp;
            }
            if (field_0x11a8 != 0.0f) {
                fVar3 = field_0x11a8 * tmp;
            }
            fVar4 = field_0x11ac;
            fVar5 = field_0x11b0;
        } else {
            fVar4 = field_0xfc8;
            fVar5 = field_0xfcc;
        }

        calcAllMapPos2D((field_0x118c + control_ypos + fVar2) - fVar4,
                        (field_0x1190 + control_xpos + fVar3) - fVar5, &field_0x1194,
                        &field_0x1198);

        field_0x11e0 -= g_fmapHIO.mCursorSpeed;

        if (field_0x11e0 < 0.0f) {
            field_0x11e0 += 360.0f;
        }

        mpPointParent->getPanePtr()->rotate(mpPointParent->getSizeX() / 2.0f,
                                            mpPointParent->getSizeY() / 2.0f, ROTATE_Z,
                                            field_0x11e0);

        if (g_fmapHIO.mCursorDebugON) {
            mpPointParent->scale(g_fmapHIO.mCursorScale, g_fmapHIO.mCursorScale);

            static const u64 cur_tag[4] = {'f_po_ru', 'f_po_rd', 'f_po_ld', 'f_po_lu'};

            for (int i = 0; i < 4; i++) {
                J2DPicture* picture = static_cast<J2DPicture*>(mpPointScreen->search(cur_tag[i]));
                picture->setBlackWhite(g_fmapHIO.mCursorBlack, g_fmapHIO.mCursorWhite);
            }
        }

        mpPointParent->setAlphaRate(field_0x11d4 * field_0x11d8);
        mpPointParent->translate(field_0x1194 + field_0xfbc, field_0x1198 + field_0xfc0);
        mpPointScreen->draw(0.0f, 0.0f, grafPort);
    }

    if (g_fmapHIO.mDisplayReferenceArea) {
        J2DDrawFrame(field_0xfbc + getMapAreaGlobalPosX(), field_0xfc0 + getMapAreaGlobalPosY(),
                     getMapAreaSizeX(), getMapAreaSizeY(), JUtility::TColor(255, 255, 255, 255), 6);
        J2DFillBox(getMapAreaGlobalCenterPosX() - 3.0f, getMapAreaGlobalCenterPosY() - 3.0f, 6.0f,
                   6.0f, JUtility::TColor(255, 255, 255, 255));
    }

    if (field_0x122d) {
        mpMeterHaihai->drawHaihai(field_0x122d);
        field_0x122d = 0;
    }

    if (g_fmapHIO.mRangeCheck && !g_fmapHIO.mRangeCheckDrawPriority) {
        drawDebugStageArea();
    }

    mpBackTex->setBlackWhite(field_0x1208, field_0x120c);
    mpBackTex->setAlpha((field_0xfc4 * 255.0f) * g_fmapHIO.mBackgroundFrontAlpha * field_0x11e4);
    mpBackTex->draw(field_0xfbc + mDoGph_gInf_c::getMinXF(),
                    field_0xfc0 + mDoGph_gInf_c::getMinYF(), mDoGph_gInf_c::getWidthF(),
                    mDoGph_gInf_c::getHeightF(), false, false, false);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::draw(){nofralloc
#include "asm/d/menu/d_menu_fmap2D/draw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80454200-80454208 002800 0004+04 4/4 0/0 0/0 .sdata2          @4260 */
SECTION_SDATA2 static f32 lit_4260[1 + 1 /* padding */] = {
    100.0f,
    /* padding */
    0.0f,
};

/* 801D0804-801D0AC8 1CB144 02C4+00 0/0 1/1 0/0 .text
 * setRegionTexData__18dMenu_Fmap2DBack_cFUcP7ResTIMGfffffffff  */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::setRegionTexData(u8 i_areaType, ResTIMG* i_timg, f32 param_2, f32 param_3,
                                          f32 param_4, f32 param_5, f32 param_6, f32 param_7,
                                          f32 param_8, f32 param_9, f32 param_10) {
    if (param_6 == 0.0f) {
        param_6 = 100.0f;
    }

    mpAreaTex[i_areaType] = new J2DPicture(i_timg);
    JUT_ASSERT(763, mpAreaTex[i_areaType] != 0);

    field_0x1004[i_areaType] = param_2;
    field_0x1024[i_areaType] = param_3;
    field_0xce8[i_areaType].field_0x10 = param_6 * 100.0f;

    f32 width = i_timg->width;
    f32 height = i_timg->height;

    f32 tmp1 = (field_0x1004[i_areaType] + param_4) -
               ((width * 0.5f) * field_0xce8[i_areaType].field_0x10);
    f32 tmp2 = (field_0x1024[i_areaType] + param_5) -
               ((height * 0.5f) * field_0xce8[i_areaType].field_0x10);
    f32 tmp3 = (field_0x1004[i_areaType] + param_4) +
               ((width * 0.5f) * field_0xce8[i_areaType].field_0x10);
    f32 tmp4 = (field_0x1024[i_areaType] + param_5) +
               ((height * 0.5f) * field_0xce8[i_areaType].field_0x10);

    field_0xce8[i_areaType].field_0x0 = tmp1;
    field_0xce8[i_areaType].field_0x4 = tmp2;
    field_0xce8[i_areaType].field_0x8 = tmp3;
    field_0xce8[i_areaType].field_0xc = tmp4;

    field_0xd8c[i_areaType] = param_7;
    field_0xdac[i_areaType] = param_8;
    field_0xdcc[i_areaType] = param_9;
    field_0xdec[i_areaType] = param_10;

    bool bVar13 = false;

    field_0xfe0 = 0.0f;
    field_0xfe4 = 0.0f;
    field_0xfe8 = 0.0f;
    field_0xfec = 0.0f;

    bool bVar14 = false;
    for (int i = 0; i < 8; i++) {
        if (mpAreaTex[i] != NULL) {
            if (!bVar13) {
                field_0xfe0 = field_0xce8[i].field_0x0;
                field_0xfe4 = field_0xce8[i].field_0x4;
                field_0xfe8 = field_0xce8[i].field_0x8;
                field_0xfec = field_0xce8[i].field_0xc;
                bVar13 = true;
            } else {
                if (field_0xfe0 > field_0xce8[i].field_0x0) {
                    field_0xfe0 = field_0xce8[i].field_0x0;
                }
                if (field_0xfe4 > field_0xce8[i].field_0x4) {
                    field_0xfe4 = field_0xce8[i].field_0x4;
                }
                if (field_0xfe8 < field_0xce8[i].field_0x8) {
                    field_0xfe8 = field_0xce8[i].field_0x8;
                }
                if (field_0xfec < field_0xce8[i].field_0xc) {
                    field_0xfec = field_0xce8[i].field_0xc;
                }
            }
        }
        if ((!bVar14) && (field_0x1230[i] == 0xff)) {
            field_0x1230[i] = i_areaType;
            bVar14 = true;
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setRegionTexData(u8 param_0, ResTIMG* param_1, f32 param_2,
                                              f32 param_3, f32 param_4, f32 param_5, f32 param_6,
                                              f32 param_7, f32 param_8, f32 param_9, f32 param_10) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setRegionTexData__18dMenu_Fmap2DBack_cFUcP7ResTIMGfffffffff.s"
}
#pragma pop
#endif

/* 801D0AC8-801D0BF8 1CB408 0130+00 1/1 1/1 0/0 .text calcAllMapPos__18dMenu_Fmap2DBack_cFv */
void dMenu_Fmap2DBack_c::calcAllMapPos() {
    bool set = false;
    calcAllMapScaleRate();
    for (int i = 0; i < 8; i = i + 1) {
        if (mpAreaTex[i] != NULL) {
            f32 tmp1, tmp2, tmp3, tmp4;

            calcAllMapPos2DFirst(field_0xce8[i].field_0x0, field_0xce8[i].field_0x4, &tmp1, &tmp2);
            calcAllMapPos2DFirst(field_0xce8[i].field_0x8, field_0xce8[i].field_0xc, &tmp3, &tmp4);
            field_0xe8c[i] = tmp1;
            field_0xeac[i] = tmp2;
            field_0xecc[i] = tmp3 - tmp1;
            field_0xeec[i] = tmp4 - tmp2;

            calcAllMapPos2DFirst(field_0xd8c[i], field_0xdac[i], &field_0xe0c[i], &field_0xe2c[i]);
            calcAllMapPos2DFirst(field_0xdcc[i], field_0xdec[i], &field_0xe4c[i], &field_0xe6c[i]);

            onShowRegionFlag(i);

            if (!set) {
                set = true;
                calcRenderingScale();
                calcRenderingPos();
            }
        }
    }
}

/* 801D0BF8-801D0C6C 1CB538 0074+00 1/1 0/0 0/0 .text calcAllMapScaleRate__18dMenu_Fmap2DBack_cFv
 */
f32 dMenu_Fmap2DBack_c::calcAllMapScaleRate() {
    f32 f1 = field_0xfe8 - field_0xfe0;
    f32 f2 = field_0xfec - field_0xfe4;
    f32 f31 = f1;

    if (f1 < f2) {
        f31 = f2;
    }

    mAllMapScaleRate = getMapAreaSizeX() / f31;

    return mAllMapScaleRate;
}

/* 801D0C6C-801D0D18 1CB5AC 00AC+00 1/1 0/0 0/0 .text
 * calcAllMapPos2DFirst__18dMenu_Fmap2DBack_cFffPfPf            */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::calcAllMapPos2DFirst(f32 param_0, f32 param_1, f32* param_2,
                                              f32* param_3) {
    f32 tmp1 = (mAllMapScaleRate * (param_0 - (field_0xfe8 + field_0xfe0) * 0.5f));
    f32 tmp2 = (mAllMapScaleRate * (param_1 - (field_0xfec + field_0xfe4) * 0.5f));

    *param_2 = (float)(tmp1 + getMapAreaGlobalCenterPosX());
    *param_3 = (float)(tmp2 + getMapAreaGlobalCenterPosY());
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcAllMapPos2DFirst(f32 param_0, f32 param_1, f32* param_2,
                                                  f32* param_3) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcAllMapPos2DFirst__18dMenu_Fmap2DBack_cFffPfPf.s"
}
#pragma pop
#endif

/* 801D0D18-801D0D50 1CB658 0038+00 13/13 1/1 0/0 .text
 * calcAllMapPos2D__18dMenu_Fmap2DBack_cFffPfPf                 */
void dMenu_Fmap2DBack_c::calcAllMapPos2D(f32 param_0, f32 param_1, f32* param_2, f32* param_3) {
    calcAllMapPos2D(param_0, param_1, param_2, param_3, field_0xf0c[field_0x1227],
                    field_0xf2c[field_0x1227], field_0xf9c);
}

/* 801D0D50-801D0E00 1CB690 00B0+00 0/0 1/1 0/0 .text
 * calcAllMapPos2D__18dMenu_Fmap2DBack_cFPCcffPfPf              */
void dMenu_Fmap2DBack_c::calcAllMapPos2D(char const* param_0, f32 param_1, f32 param_2,
                                         f32* param_3, f32* param_4) {
    float tmp1, tmp2;
    calcOffset(field_0x1227, param_0, &tmp1, &tmp2);
    calcAllMapPos2D(param_1 + tmp1, param_2 + tmp2, param_3, param_4, field_0xf0c[field_0x1227],
                    field_0xf2c[field_0x1227], field_0xf9c);
}

/* 801D0E00-801D0F7C 1CB740 017C+00 3/3 0/0 0/0 .text
 * calcAllMapPos2D__18dMenu_Fmap2DBack_cFffPfPffff              */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::calcAllMapPos2D(f32 param_0, f32 param_1, f32* param_2, f32* param_3,
                                         f32 param_4, f32 param_5, f32 param_6) {
    getMapAreaSizeX();
    getMapAreaSizeY();

    f32 tmp1 = (field_0xce8[field_0x1227].field_0x0 + field_0xce8[field_0x1227].field_0x8) * 0.5f;
    f32 tmp2 = (field_0xce8[field_0x1227].field_0x4 + field_0xce8[field_0x1227].field_0xc) * 0.5f;
    f32 tmp3 = field_0xe8c[field_0x1227] + param_4 + (field_0xecc[field_0x1227] * param_6) * 0.5f;
    f32 tmp4 = field_0xeac[field_0x1227] + param_5 + (field_0xeec[field_0x1227] * param_6) * 0.5f;

    f32 scaleRatio = (getPathScale(param_6) / getMapScissorAreaSizeRealY());

    f32 tmp5 = (param_0 - tmp1) / scaleRatio;
    *param_2 = tmp5 + tmp3;
    tmp5 = (param_1 - tmp2) / scaleRatio;
    *param_3 = tmp5 + tmp4;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcAllMapPos2D(f32 param_0, f32 param_1, f32* param_2, f32* param_3,
                                             f32 param_4, f32 param_5, f32 param_6) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcAllMapPos2D__18dMenu_Fmap2DBack_cFffPfPffff.s"
}
#pragma pop
#endif

/* 801D0F7C-801D1094 1CB8BC 0118+00 8/8 3/3 0/0 .text
 * calcAllMapPosWorld__18dMenu_Fmap2DBack_cFffPfPf              */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::calcAllMapPosWorld(f32 param_0, f32 param_1, f32* param_2, f32* param_3) {
    f32 tmp1 = (field_0xce8[field_0x1227].field_0x0 + field_0xce8[field_0x1227].field_0x8) * 0.5f;
    f32 tmp2 = (field_0xce8[field_0x1227].field_0x4 + field_0xce8[field_0x1227].field_0xc) * 0.5f;
    f32 tmp3 = (param_0 - ((field_0xe8c[field_0x1227] + field_0xf0c[field_0x1227]) +
                           field_0xecc[field_0x1227] * field_0xf9c * 0.5f));
    f32 tmp4 = (param_1 - ((field_0xeac[field_0x1227] + field_0xf2c[field_0x1227]) +
                           field_0xeec[field_0x1227] * field_0xf9c * 0.5f));

    f32 tmp5 = field_0xf98 / getMapScissorAreaSizeRealY();

    *param_2 = tmp1 + (tmp3 * tmp5);
    *param_3 = tmp2 + (tmp4 * tmp5);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcAllMapPosWorld(f32 param_0, f32 param_1, f32* param_2,
                                                f32* param_3) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcAllMapPosWorld__18dMenu_Fmap2DBack_cFffPfPf.s"
}
#pragma pop
#endif

/* 801D1094-801D10F4 1CB9D4 0060+00 0/0 1/1 0/0 .text setSpotPane__18dMenu_Fmap2DBack_cFP7ResTIMG
 */
void dMenu_Fmap2DBack_c::setSpotPane(ResTIMG* i_timg) {
    if (mpSpotTexture == NULL) {
        mpSpotTexture = new J2DPicture(i_timg);
        JUT_ASSERT(1169, mpSpotTexture != 0);
    }
}

/* 801D10F4-801D1148 1CBA34 0054+00 1/1 1/1 0/0 .text deleteSpotPane__18dMenu_Fmap2DBack_cFv */
void dMenu_Fmap2DBack_c::deleteSpotPane() {
    if (mpSpotTexture != NULL) {
        delete mpSpotTexture;
        mpSpotTexture = NULL;
    }
}

/* 801D1148-801D1478 1CBA88 0330+00 0/0 8/8 0/0 .text            zoomMapCalc__18dMenu_Fmap2DBack_cFf
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::zoomMapCalc(f32 param_0) {
    field_0xfa0 = param_0;
    field_0xfa8 = param_0;
    field_0xf9c = getAllMapZoomRate() +
                  (param_0 * (getRegionMapZoomRate(field_0x1227) - getAllMapZoomRate()));
    calcRenderingScale();

    f32 centerX = getMapAreaGlobalCenterPosX();
    f32 centerY = getMapAreaGlobalCenterPosY();
    if (g_fmapHIO.field_0x308 == false) {
        f32 dVar12 = field_0xe8c[field_0x1227] + (field_0xecc[field_0x1227] * 0.5f);
        f32 dVar11 = field_0xeac[field_0x1227] + (field_0xeec[this->field_0x1227] * 0.5f);
        field_0xf0c[field_0x1227] = (dVar12 + (param_0 * (centerX - dVar12)) -
                                     (field_0xecc[field_0x1227] * field_0xf9c * 0.5f)) -
                                    field_0xe8c[field_0x1227];
        field_0xf2c[field_0x1227] = (dVar11 + (param_0 * (centerY - dVar11)) -
                                     (field_0xeec[field_0x1227] * field_0xf9c * 0.5f)) -
                                    field_0xeac[field_0x1227];
    } else {
        f32 dVar12 = (field_0xe0c[field_0x1227] + field_0xe4c[field_0x1227]) * 0.5f;
        f32 dVar11 = (field_0xe2c[field_0x1227] + field_0xe6c[field_0x1227]) * 0.5f;

        f32 tmp = (field_0xeac[field_0x1227] + (field_0xeec[field_0x1227] * 0.5f)) - dVar11;

        f32 tmp2 = (dVar12 + (param_0 * (centerX - dVar12)));
        f32 tmp3 = (((field_0xe8c[field_0x1227] + field_0xecc[field_0x1227] * 0.5f) - dVar12));
        field_0xf0c[field_0x1227] =
            (((tmp2 + (tmp3 * field_0xf9c))) - field_0xecc[field_0x1227] * field_0xf9c * 0.5f) -
            field_0xe8c[field_0x1227];

        field_0xf2c[field_0x1227] =
            (((dVar11 + (param_0 * (centerY - dVar11))) + tmp * field_0xf9c) -
             field_0xeec[field_0x1227] * field_0xf9c * 0.5f) -
            field_0xeac[field_0x1227];
    }

    for (int i = 0; i < 8; i++) {
        if (i != field_0x1227) {
            field_0xf0c[i] =
                field_0xf0c[field_0x1227] +
                (field_0xe8c[i] - field_0xe8c[field_0x1227]) * (field_0xf9c - getAllMapZoomRate());
            field_0xf2c[i] =
                field_0xf2c[field_0x1227] +
                (field_0xeac[i] - field_0xeac[field_0x1227]) * (field_0xf9c - getAllMapZoomRate());
        }
    }

    if (param_0 == 1.0f) {
        for (int i = 0; i < 8; i++) {
            field_0xf4c[i] = field_0xf0c[i];
            field_0xf6c[i] = field_0xf2c[i];
        }
    }

    calcRenderingPos();
    setSpotCursor(field_0x1229);

    field_0xfb8 =
        ((field_0xecc[field_0x1227] + (param_0 * (getMapAreaSizeX() - field_0xecc[field_0x1227]))) /
         getMapAreaSizeX());
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::zoomMapCalc(f32 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/zoomMapCalc__18dMenu_Fmap2DBack_cFf.s"
}
#pragma pop
#endif

/* 801D1478-801D1858 1CBDB8 03E0+00 0/0 10/10 0/0 .text zoomMapCalc2__18dMenu_Fmap2DBack_cFf */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::zoomMapCalc2(f32 param_0) {
    f32 spotZoomRate = getSpotMapZoomRate();
    f32 regionZoomRate = getRegionMapZoomRate(field_0x1227);
    field_0xf9c = regionZoomRate + (param_0 * (spotZoomRate - regionZoomRate));

    if (field_0x118c + control_ypos < field_0xd8c[field_0x1227]) {
        if (field_0x11a4 == 0.0f) {
            field_0x11a4 = (field_0x118c + control_ypos) - field_0xd8c[field_0x1227];
        }
        control_ypos = field_0xd8c[field_0x1227] - field_0x118c;
    } else {
        if (field_0x118c + control_ypos > field_0xdcc[field_0x1227]) {
            if (field_0x11a4 == 0.0f) {
                field_0x11a4 = (field_0x118c + control_ypos) - field_0xdcc[field_0x1227];
            }
            control_ypos = field_0xdcc[field_0x1227] - field_0x118c;
        }
    }

    if (field_0x1190 + control_xpos < field_0xdac[field_0x1227]) {
        if (field_0x11a8 == 0.0f) {
            field_0x11a8 = (field_0x1190 + control_xpos) - field_0xdac[field_0x1227];
        }
        control_xpos = field_0xdac[field_0x1227] - this->field_0x1190;
    } else {
        if (field_0x1190 + control_xpos > field_0xdec[field_0x1227]) {
            if (field_0x11a8 == 0.0f) {
                field_0x11a8 = (field_0x1190 + control_xpos) - field_0xdec[field_0x1227];
            }
            control_xpos = field_0xdec[field_0x1227] - field_0x1190;
        }
    }

    calcRenderingScale();

    field_0xfa0 = param_0 + 1.0f;
    f32 centerX = getMapAreaGlobalCenterPosX();
    f32 centerY = getMapAreaGlobalCenterPosY();
    if (g_fmapHIO.field_0x308 == false) {
        field_0xf0c[field_0x1227] = (centerX - (field_0xecc[field_0x1227] * field_0xf9c * 0.5f)) -
                                    field_0xe8c[field_0x1227];
        field_0xf2c[field_0x1227] = (centerY - (field_0xeec[field_0x1227] * field_0xf9c * 0.5f)) -
                                    field_0xeac[field_0x1227];
    } else {
        f32 tmp1 = (field_0xeac[field_0x1227] + (field_0xeec[field_0x1227] * 0.5f)) -
                   ((field_0xe2c[field_0x1227] + field_0xe6c[field_0x1227]) * 0.5f);

        f32 tmp2 = ((field_0xe8c[field_0x1227] + field_0xecc[field_0x1227] * 0.5f) -
                    (field_0xe0c[field_0x1227] + field_0xe4c[field_0x1227]) * 0.5f);

        field_0xf0c[field_0x1227] =
            ((centerX + (tmp2 * field_0xf9c)) - field_0xecc[field_0x1227] * field_0xf9c * 0.5f) -
            field_0xe8c[field_0x1227];
        field_0xf2c[field_0x1227] =
            ((centerY + (tmp1 * field_0xf9c)) - field_0xeec[field_0x1227] * field_0xf9c * 0.5f) -
            field_0xeac[field_0x1227];
    }

    for (int i = 0; i < 8; i++) {
        if (i != field_0x1227) {
            field_0xf0c[i] =
                field_0xf0c[field_0x1227] +
                (field_0xe8c[i] - field_0xe8c[field_0x1227]) * (field_0xf9c - getAllMapZoomRate());
            field_0xf2c[i] =
                field_0xf2c[field_0x1227] +
                (field_0xeac[i] - field_0xeac[field_0x1227]) * (field_0xf9c - getAllMapZoomRate());
        }
    }

    scrollCalc(param_0);

    if (param_0 == 1.0f) {
        field_0x11b4 = (field_0x118c + control_ypos) - field_0xfc8;
        field_0x11b8 = (field_0x1190 + control_xpos) - field_0xfcc;
        field_0x11a4 = 0.0f;
        field_0x11a8 = 0.0f;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::zoomMapCalc2(f32 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/zoomMapCalc2__18dMenu_Fmap2DBack_cFf.s"
}
#pragma pop
#endif

/* 801D1858-801D1AA4 1CC198 024C+00 0/0 1/1 0/0 .text zoomMapCalcHIO__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::zoomMapCalcHIO() {
    if (field_0xf9c != getSpotMapZoomRate()) {
        f32 spotZoomRate = getSpotMapZoomRate();
        f32 regionZoomRate = getRegionMapZoomRate(field_0x1227);
        field_0xf9c = getSpotMapZoomRate();
        calcRenderingScale();

        f32 centerX = getMapAreaGlobalCenterPosX();
        f32 centerY = getMapAreaGlobalCenterPosY();
        if (g_fmapHIO.field_0x308 == false) {
            field_0xf0c[field_0x1227] =
                (centerX - (field_0xecc[field_0x1227] * field_0xf9c * 0.5f)) -
                field_0xe8c[field_0x1227];
            field_0xf2c[field_0x1227] =
                (centerY - (field_0xeec[field_0x1227] * field_0xf9c * 0.5f)) -
                field_0xeac[field_0x1227];
        } else {
            f32 tmp1 = (field_0xeac[field_0x1227] + (field_0xeec[field_0x1227] * 0.5f)) -
                       ((field_0xe2c[field_0x1227] + field_0xe6c[field_0x1227]) * 0.5f);

            f32 tmp2 = ((field_0xe8c[field_0x1227] + field_0xecc[field_0x1227] * 0.5f) -
                        (field_0xe0c[field_0x1227] + field_0xe4c[field_0x1227]) * 0.5f);

            field_0xf0c[field_0x1227] = ((centerX + (tmp2 * field_0xf9c)) -
                                         field_0xecc[field_0x1227] * field_0xf9c * 0.5f) -
                                        field_0xe8c[field_0x1227];
            field_0xf2c[field_0x1227] = ((centerY + (tmp1 * field_0xf9c)) -
                                         field_0xeec[field_0x1227] * field_0xf9c * 0.5f) -
                                        field_0xeac[field_0x1227];
        }

        for (int i = 0; i < 8; i++) {
            if (i != field_0x1227) {
                field_0xf0c[i] =
                    field_0xf0c[field_0x1227] + (field_0xe8c[i] - field_0xe8c[field_0x1227]) *
                                                    (field_0xf9c - getAllMapZoomRate());
                field_0xf2c[i] =
                    field_0xf2c[field_0x1227] + (field_0xeac[i] - field_0xeac[field_0x1227]) *
                                                    (field_0xf9c - getAllMapZoomRate());
            }
        }

        scrollCalc(1.0f);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::zoomMapCalcHIO() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/zoomMapCalcHIO__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D1AA4-801D1D50 1CC3E4 02AC+00 2/2 0/0 0/0 .text            scrollCalc__18dMenu_Fmap2DBack_cFf
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::scrollCalc(f32 param_0) {
    f32 tmp1, tmp2;
    calcAllMapPos2D(field_0x118c + control_ypos, field_0x1190 + control_xpos, &tmp1, &tmp2,
                    field_0xf4c[field_0x1227], field_0xf6c[field_0x1227],
                    getRegionMapZoomRate(field_0x1227));

    f32 centerX = getMapAreaGlobalCenterPosX();
    f32 centerY = getMapAreaGlobalCenterPosY();

    f32 tmp3, tmp4;
    calcAllMapPosWorld(tmp1 + (param_0 * (centerX - tmp1)), tmp2 + (param_0 * (centerY - tmp2)),
                       &tmp3, &tmp4);

    field_0xfc8 = (field_0x118c + control_ypos) - tmp3;
    field_0xfcc = (field_0x1190 + control_xpos) - tmp4;

    field_0x11ac = field_0xfc8;
    field_0x11b0 = field_0xfcc;

    if ((((field_0x11a4 != 0.0f) || (field_0x11a8 != 0.0f)) && (field_0xfa0 > 1.0f)) &&
        (field_0xfa0 < 2.0f))
    {
        f32 local_40 = 2.0f - field_0xfa0;

        //!@bug local_44 or local_48 can be uninitialized if field_0x11a4 or field_0x11a8 is not 0
        f32 local_44, local_48;

        if (field_0x11a4 != 0.0f) {
            local_44 = field_0x11a4 * local_40;
        }

        if (field_0x11a8 != 0.0f) {
            local_48 = field_0x11a8 * local_40;
        }

        calcAllMapPos2D(field_0x118c + control_ypos + local_44,
                        field_0x1190 + control_xpos + local_48, &tmp1, &tmp2,
                        field_0xf4c[field_0x1227], field_0xf6c[field_0x1227],
                        getRegionMapZoomRate(field_0x1227));

        f32 local_54, local_58;
        calcAllMapPosWorld(tmp1 + (param_0 * (centerX - tmp1)), tmp2 + (param_0 * (centerY - tmp2)),
                           &local_54, &local_58);

        field_0x11ac = (field_0x118c + control_ypos + local_44) - local_54;
        field_0x11b0 = (field_0x1190 + control_xpos + local_48) - local_58;
    }

    if (param_0 == 0.0f) {
        field_0xfd4 = 0.0f;
        field_0xfd0 = 0.0f;
        field_0xfdc = 0.0f;
        field_0xfd8 = 0.0f;
    } else if (param_0 == 1.0f) {
        field_0xfd0 = field_0xfc8;
        field_0xfd4 = field_0xfcc;
    }

    calcRenderingPos();
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::scrollCalc(f32 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/scrollCalc__18dMenu_Fmap2DBack_cFf.s"
}
#pragma pop
#endif

/* 801D1D50-801D1D74 1CC690 0024+00 0/0 1/1 0/0 .text            mapBlink__18dMenu_Fmap2DBack_cFPs
 */
void dMenu_Fmap2DBack_c::mapBlink(s16* param_0) {
    *param_0 += 1;
    if (*param_0 >= 30) {
        *param_0 -= 30;
    }
}

/* 801D1D74-801D1DC4 1CC6B4 0050+00 1/1 5/5 0/0 .text setSpotCursor__18dMenu_Fmap2DBack_cFUc */
void dMenu_Fmap2DBack_c::setSpotCursor(u8 param_0) {
    this->field_0x1229 = param_0;

    f32 tmp1, tmp2;
    getStageOriginPath(param_0, &tmp1, &tmp2);
    calcAllMapPos2D(tmp1, tmp2, &field_0x1184, &field_0x1188);
}

/* 801D1DC4-801D2100 1CC704 033C+00 0/0 1/1 0/0 .text
 * allmap_move2__18dMenu_Fmap2DBack_cFP9STControl               */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::allmap_move2(STControl* param_0) {
    f32 tmp1, tmp2;
    calcAllMapPosWorld(getMapScissorAreaLX(), getMapScissorAreaLY(), &tmp1, &tmp2);

    f32 local_50, local_54;
    calcAllMapPosWorld(getMapScissorAreaLX() + getMapScissorAreaSizeRealX(),
                       getMapScissorAreaLY() + getMapScissorAreaSizeRealY(), &local_50, &local_54);

    f32 scrollSpeed1 = g_fmapHIO.mScrollSpeedSlowBound < g_fmapHIO.mScrollSpeedFastBound ?
                           g_fmapHIO.mScrollSpeedSlowBound :
                           g_fmapHIO.mScrollSpeedFastBound;
    f32 scrollSpeed2 = g_fmapHIO.mScrollSpeedSlowBound > g_fmapHIO.mScrollSpeedFastBound ?
                           g_fmapHIO.mScrollSpeedSlowBound :
                           g_fmapHIO.mScrollSpeedFastBound;

    f32 stickValue = param_0->getValueStick();
    if (stickValue >= scrollSpeed1) {
        s16 angle = param_0->getAngleStick();
        f32 local_68 = (field_0xfe8 - field_0xfe0);
        f32 zoomRate = local_68 / getAllMapZoomRate();

        f32 speed = ((stickValue < scrollSpeed2 ? g_fmapHIO.mScrollSpeedWorldSlow :
                                                  g_fmapHIO.mScrollSpeedWorldFast) /
                     100.0f);

        f32 delta_y = (speed * zoomRate) * cM_ssin(angle);
        f32 delta_x = (speed * zoomRate) * cM_scos(angle);

        control_ypos = control_ypos + delta_y;
        control_xpos = control_xpos + delta_x;
    }

    if (field_0x118c + control_ypos < tmp1) {
        control_ypos = tmp1 - field_0x118c;
    }

    if (field_0x118c + control_ypos > local_50) {
        control_ypos = local_50 - field_0x118c;
    }

    if (field_0x1190 + control_xpos < tmp2) {
        control_xpos = tmp2 - field_0x1190;
    }

    if (field_0x1190 + control_xpos > local_54) {
        control_xpos = local_54 - field_0x1190;
    }

    calcRenderingScale();
    calcRenderingPos();
    calcAllMapPos();

    f32 local_7c, local_80;
    calcAllMapPos2D((field_0x118c + control_ypos) - field_0xfc8,
                    (field_0x1190 + control_xpos) - field_0xfcc, &local_7c, &local_80);

    field_0x1226 = 0xff;
    for (int i = 7; i >= 0; i--) {
        int val = field_0x1230[i];
        if (val != 0xff && val != 7) {
            const ResTIMG* timg = mpAreaTex[val]->getTexture(0)->getTexInfo();
            bool pixel = dMeter2Info_getPixel(
                local_7c, local_80, (field_0xe8c[val] + field_0xf0c[val] + field_0xfbc),
                (field_0xeac[val] + field_0xf2c[val] + field_0xfc0),
                (field_0xecc[val] * field_0xf9c), (field_0xeec[val] * field_0xf9c), timg);
            if (pixel) {
                field_0x1226 = val;
            }
        }
        if (field_0x1226 != 0xff)
            break;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::allmap_move2(STControl* param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/allmap_move2__18dMenu_Fmap2DBack_cFP9STControl.s"
}
#pragma pop
#endif

/* 801D2100-801D241C 1CCA40 031C+00 1/1 3/3 0/0 .text setIcon2DPos__18dMenu_Fmap2DBack_cFUcfffUcb
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::setIcon2DPos(u8 param_0, f32 param_1, f32 param_2, f32 param_3, u8 param_4,
                                      bool param_5) {
    f32 local_68, local_6c;

    f32 local_70 = field_0xfa0;
    u8 uVar9 = 1;
    if (param_0 == 17) {
        uVar9 = 2;

        f32 local_74, local_78;
        calcAllMapPosWorld(getMapScissorAreaCenterPosX(), getMapScissorAreaCenterPosY(), &local_74,
                           &local_78);

        f32 local_7c, local_80;
        calcAllMapPos2D(local_74 + field_0xfc8, local_78 + field_0xfcc, &local_7c, &local_80);

        f32 dVar11 = getMapScissorAreaCenterPosX() - local_7c;
        f32 dVar10 = getMapScissorAreaCenterPosY() - local_80;

        if (field_0x1227 + 1 == dComIfGp_getNowLevel()) {
            calcAllMapPos2D(param_1 - field_0xfc8, param_2 - field_0xfcc, &local_68, &local_6c);
            f32 tmp1 = (dVar10 + (field_0xeac[field_0x1227] + field_0xf2c[field_0x1227])) +
                       ((field_0xeec[field_0x1227] * field_0xf9c) / 2.0f);
            f32 tmp2 = (dVar11 + (field_0xe8c[field_0x1227] + field_0xf0c[field_0x1227])) +
                       ((field_0xecc[field_0x1227] * field_0xf9c) / 2.0f);

            field_0x11e8 = local_68 - tmp2;
            field_0x11ec = local_6c - tmp1;
        } else {
            f32 tmp1 = (dVar11 + (field_0xe6c[dComIfGp_getNowLevel() + 7] +
                                  field_0xeec[dComIfGp_getNowLevel() + 7])) +
                       ((field_0xeac[dComIfGp_getNowLevel() + 7] * field_0xf9c) / 2.0f);
            f32 tmp2 = (dVar10 + (field_0xe8c[dComIfGp_getNowLevel() + 7] +
                                  field_0xf0c[dComIfGp_getNowLevel() + 7])) +
                       ((field_0xecc[dComIfGp_getNowLevel() + 7] * field_0xf9c) / 2.0f);
            local_68 = tmp1 + (field_0x11e8 * field_0xf9c);
            local_6c = tmp2 + (field_0x11ec * field_0xf9c);
        }
    } else {
        calcAllMapPos2D(param_1 - field_0xfc8, param_2 - field_0xfcc, &local_68, &local_6c);
    }

    if (!param_5) {
        if (param_0 == 1) {
            local_70 = (field_0xfa0 * 0.5f) + 0.5f;
            uVar9 = 2;
        }

        if (param_4 != 0) {
            uVar9 = 3;
        }
        setIconInfo(param_0, local_68, local_6c, 1.0f, param_3, local_70, uVar9);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setIcon2DPos(u8 param_0, f32 param_1, f32 param_2, f32 param_3,
                                          u8 param_4, bool param_5) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setIcon2DPos__18dMenu_Fmap2DBack_cFUcfffUcb.s"
}
#pragma pop
#endif

/* 801D241C-801D2454 1CCD5C 0038+00 0/0 2/2 0/0 .text
 * setIcon2DPos__18dMenu_Fmap2DBack_cFUcPCcfffUcb               */
void dMenu_Fmap2DBack_c::setIcon2DPos(u8 param_0, char const* param_1, f32 param_2, f32 param_3,
                                      f32 param_4, u8 param_5, bool param_6) {
    setIcon2DPos(param_0, field_0x1227, param_1, param_2, param_3, param_4, param_5, param_6);
}

/* 801D2454-801D2508 1CCD94 00B4+00 1/1 0/0 0/0 .text
 * setIcon2DPos__18dMenu_Fmap2DBack_cFUcUcPCcfffUcb             */
void dMenu_Fmap2DBack_c::setIcon2DPos(u8 param_0, u8 param_1, char const* param_2, f32 param_3,
                                      f32 param_4, f32 param_5, u8 param_6, bool param_7) {
    f32 tmp1, tmp2;
    calcOffset(param_1, param_2, &tmp1, &tmp2);

    setIcon2DPos(param_0, param_3 + tmp1, param_4 + tmp2, param_5, param_6, param_7);
}

/* 801D2508-801D2658 1CCE48 0150+00 1/1 1/1 0/0 .text isShowRegion__18dMenu_Fmap2DBack_cFi */
int dMenu_Fmap2DBack_c::isShowRegion(int param_0) {
    if (param_0 == 7) {
        return 1;
    }

    if (g_fmapHIO.mAllRegionsUnlocked) {
        if (isShowRegionFlag(param_0)) {
            return 1;
        }
    } else {
        if (g_fmapHIO.mDebugRegionBits[param_0] && isShowRegionFlag(param_0)) {
            return 1;
        }
        if (param_0 == 6) {
            if (isShowRegionFlag(3) && dComIfGs_isRegionBit(4)) {
                return 1;
            }
            if (dComIfGp_getNowLevel() == 4) {
                return 1;
            }
            return 0;
        }
        if (isShowRegionFlag(param_0) && dComIfGs_isRegionBit(param_0 + 1)) {
            return 1;
        }
        if (param_0 + 1 == dComIfGp_getNowLevel()) {
            return 1;
        }
    }

    return 0;
}

/* 801D2658-801D2668 1CCF98 0010+00 2/2 0/0 0/0 .text getMapAreaGlobalPosX__18dMenu_Fmap2DBack_cFv
 */
f32 dMenu_Fmap2DBack_c::getMapAreaGlobalPosX() {
    return g_fmapHIO.mMapTopLeftPosX;
}

/* 801D2668-801D2678 1CCFA8 0010+00 2/2 0/0 0/0 .text getMapAreaGlobalPosY__18dMenu_Fmap2DBack_cFv
 */
f32 dMenu_Fmap2DBack_c::getMapAreaGlobalPosY() {
    return g_fmapHIO.mMapTopLeftPosY;
}

/* 801D2678-801D26C8 1CCFB8 0050+00 7/7 1/1 0/0 .text
 * getMapAreaGlobalCenterPosX__18dMenu_Fmap2DBack_cFv           */
#ifdef NONMATCHING
// Matches with literals
f32 dMenu_Fmap2DBack_c::getMapAreaGlobalCenterPosX() {
    return getMapAreaGlobalPosX() + (getMapAreaSizeX() / 2.0f);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMenu_Fmap2DBack_c::getMapAreaGlobalCenterPosX() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/getMapAreaGlobalCenterPosX__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D26C8-801D2718 1CD008 0050+00 7/7 1/1 0/0 .text
 * getMapAreaGlobalCenterPosY__18dMenu_Fmap2DBack_cFv           */
#ifdef NONMATCHING
// Matches with literals
f32 dMenu_Fmap2DBack_c::getMapAreaGlobalCenterPosY() {
    return getMapAreaGlobalPosY() + (getMapAreaSizeY() / 2.0f);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMenu_Fmap2DBack_c::getMapAreaGlobalCenterPosY() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/getMapAreaGlobalCenterPosY__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D2718-801D2728 1CD058 0010+00 8/8 0/0 0/0 .text getMapAreaSizeX__18dMenu_Fmap2DBack_cFv */
f32 dMenu_Fmap2DBack_c::getMapAreaSizeX() {
    return g_fmapHIO.mMapScale;
}

/* 801D2728-801D2738 1CD068 0010+00 6/6 0/0 0/0 .text getMapAreaSizeY__18dMenu_Fmap2DBack_cFv */
f32 dMenu_Fmap2DBack_c::getMapAreaSizeY() {
    return g_fmapHIO.mMapScale;
}

/* 801D2738-801D2790 1CD078 0058+00 10/10 0/0 0/0 .text
 * getMapScissorAreaLX__18dMenu_Fmap2DBack_cFv                  */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaLX() {
    Mtx mtx;
    Vec vec = mpMapArea->getGlobalVtx(mpMapArea->getPanePtr(), &mtx, 0, false, 0);
    return vec.x;
}

/* 801D2790-801D27E8 1CD0D0 0058+00 9/9 0/0 0/0 .text getMapScissorAreaLY__18dMenu_Fmap2DBack_cFv
 */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaLY() {
    Mtx mtx;
    Vec vec = mpMapArea->getGlobalVtx(mpMapArea->getPanePtr(), &mtx, 0, false, 0);
    return vec.y;
}

/* 801D27E8-801D2860 1CD128 0078+00 2/2 0/0 0/0 .text
 * getMapScissorAreaSizeX__18dMenu_Fmap2DBack_cFv               */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaSizeX() {
    f32 scale = mpMapArea->getScaleX();

    for (J2DPane* pane = mpMapArea->getPanePtr()->getParentPane(); pane != NULL;
         pane = pane->getParentPane())
    {
        scale *= pane->getScaleX();
    }

    return scale * mpMapArea->getSizeX();
}

/* 801D2860-801D2880 1CD1A0 0020+00 8/8 0/0 0/0 .text
 * getMapScissorAreaSizeRealX__18dMenu_Fmap2DBack_cFv           */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaSizeRealX() {
    return getMapScissorAreaSizeX();
}

/* 801D2880-801D28D0 1CD1C0 0050+00 3/3 0/0 0/0 .text
 * getMapScissorAreaCenterPosX__18dMenu_Fmap2DBack_cFv          */
#ifdef NONMATCHING
// Matches with literals
f32 dMenu_Fmap2DBack_c::getMapScissorAreaCenterPosX() {
    return getMapScissorAreaLX() + (getMapScissorAreaSizeRealX() / 2.0f);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMenu_Fmap2DBack_c::getMapScissorAreaCenterPosX() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/getMapScissorAreaCenterPosX__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D28D0-801D2920 1CD210 0050+00 3/3 0/0 0/0 .text
 * getMapScissorAreaCenterPosY__18dMenu_Fmap2DBack_cFv          */
#ifdef NONMATCHING
// Matches with literals
f32 dMenu_Fmap2DBack_c::getMapScissorAreaCenterPosY() {
    return getMapScissorAreaLY() + (getMapScissorAreaSizeRealY() / 2.0f);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMenu_Fmap2DBack_c::getMapScissorAreaCenterPosY() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/getMapScissorAreaCenterPosY__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D2920-801D2998 1CD260 0078+00 2/2 0/0 0/0 .text
 * getMapScissorAreaSizeY__18dMenu_Fmap2DBack_cFv               */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaSizeY() {
    f32 scale = mpMapArea->getScaleY();

    for (J2DPane* pane = mpMapArea->getPanePtr()->getParentPane(); pane != NULL;
         pane = pane->getParentPane())
    {
        scale *= pane->getScaleY();
    }

    return scale * mpMapArea->getSizeY();
}

/* 801D2998-801D29B8 1CD2D8 0020+00 11/11 0/0 0/0 .text
 * getMapScissorAreaSizeRealY__18dMenu_Fmap2DBack_cFv           */
f32 dMenu_Fmap2DBack_c::getMapScissorAreaSizeRealY() {
    return getMapScissorAreaSizeY();
}

/* 801D29B8-801D2A34 1CD2F8 007C+00 6/6 0/0 0/0 .text calcRenderingPos__18dMenu_Fmap2DBack_cFv */
void dMenu_Fmap2DBack_c::calcRenderingPos() {
    calcAllMapPosWorld(getMapScissorAreaCenterPosX(), getMapScissorAreaCenterPosY(), &field_0xf8c,
                       &field_0xf90);

    field_0xf8c += field_0xfc8;
    field_0xf90 += field_0xfcc;
}

/* 801D2A34-801D2AC8 1CD374 0094+00 7/7 0/0 0/0 .text calcRenderingScale__18dMenu_Fmap2DBack_cFv
 */
void dMenu_Fmap2DBack_c::calcRenderingScale() {
    f32 xScale = (field_0xfe8 - field_0xfe0) / getMapAreaSizeX();
    f32 yScale = (field_0xfec - field_0xfe4) / getMapAreaSizeY();

    f32 scale = xScale;
    if (xScale < yScale) {
        scale = yScale;
    }

    field_0xf94 = scale / field_0xf9c;
    field_0xf98 = field_0xf94 * getMapScissorAreaSizeRealY();
}

/* 801D2AC8-801D2B5C 1CD408 0094+00 1/1 0/0 0/0 .text getPathScale__18dMenu_Fmap2DBack_cFf */
f32 dMenu_Fmap2DBack_c::getPathScale(f32 i_zoom) {
    JUT_ASSERT(2204, i_zoom != 0.0f);

    f32 xScale = (field_0xfe8 - field_0xfe0) / getMapAreaSizeX();
    f32 yScale = (field_0xfec - field_0xfe4) / getMapAreaSizeY();

    f32 scale = xScale;
    if (xScale < yScale) {
        scale = yScale;
    }

    return (scale * getMapScissorAreaSizeRealY()) / i_zoom;
}

/* 801D2B5C-801D2B64 1CD49C 0008+00 6/6 0/0 0/0 .text getAllMapZoomRate__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
f32 dMenu_Fmap2DBack_c::getAllMapZoomRate() {
    return 1.0f;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMenu_Fmap2DBack_c::getAllMapZoomRate() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/getAllMapZoomRate__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D2B64-801D2C4C 1CD4A4 00E8+00 6/6 0/0 0/0 .text getRegionMapZoomRate__18dMenu_Fmap2DBack_cFi
 */
f32 dMenu_Fmap2DBack_c::getRegionMapZoomRate(int param_0) {
    f32 tmp1, tmp2;

    if (g_fmapHIO.field_0x308 == false) {
        tmp1 = getMapAreaSizeX() / field_0xecc[param_0];
        tmp2 = getMapAreaSizeY() / field_0xeec[param_0];
    } else {
        tmp1 = getMapAreaSizeX() / (field_0xe4c[field_0x1227] - field_0xe0c[field_0x1227]);
        tmp2 = getMapAreaSizeY() / (field_0xe6c[field_0x1227] - field_0xe2c[field_0x1227]);
    }

    if (tmp1 < tmp2) {
        field_0x122e = 0;
        tmp2 = tmp1;
    } else {
        field_0x122e = 1;
    }

    return tmp2;
}

/* 801D2C4C-801D2C88 1CD58C 003C+00 4/4 0/0 0/0 .text getSpotMapZoomRate__18dMenu_Fmap2DBack_cFv
 */
f32 dMenu_Fmap2DBack_c::getSpotMapZoomRate() {
    f32 tmp1 = field_0xfe8 - field_0xfe0;
    f32 tmp2 = field_0xfec - field_0xfe4;

    f32 tmp3 = tmp1;
    if (tmp1 < tmp2) {
        tmp3 = tmp2;
    }

    return tmp3 / g_fmapHIO.mRegionZoomRange;
}

/* 801D2C88-801D2CC8 1CD5C8 0040+00 1/1 0/0 0/0 .text
 * getStageOriginPath__18dMenu_Fmap2DBack_cFUcPfPf              */
void dMenu_Fmap2DBack_c::getStageOriginPath(u8 param_0, f32* param_1, f32* param_2) {
    for (int i = 0; i < 20; i++) {
        if (i == param_0) {
            *param_1 = field_0x10e4[i];
            *param_2 = field_0x1134[i];
            break;
        }
    }
}

/* 801D2CC8-801D2DA8 1CD608 00E0+00 4/4 0/0 0/0 .text calcOffset__18dMenu_Fmap2DBack_cFUcPCcPfPf
 */
void dMenu_Fmap2DBack_c::calcOffset(u8 param_0, char const* param_1, f32* param_2, f32* param_3) {
    if (mpStages != NULL) {
        Stage_c::Stage_c_data* data = mpStages->field_0x4;
        for (int i = 0; i < field_0x1225; i++) {
            if (param_0 + 1 == data[i].field_0x9 && strcmp(param_1, data[i].mName) == 0) {
                *param_2 = field_0x1004[param_0] + data[i].field_0xc;
                *param_3 = field_0x1024[param_0] + data[i].field_0x10;
                return;
            }
        }
    }

    *param_2 = field_0x1004[param_0];
    *param_3 = field_0x1024[param_0];
}

/* 801D2DA8-801D3094 1CD6E8 02EC+00 1/1 0/0 0/0 .text regionTextureDraw__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::regionTextureDraw() {
    f32 local_84, local_88;
    calcAllMapPosWorld(getMapScissorAreaCenterPosX(), getMapScissorAreaCenterPosY(), &local_84,
                       &local_88);

    f32 local_8c, local_90;
    calcAllMapPos2D(local_84 + field_0xfc8, local_88 + field_0xfcc, &local_8c, &local_90);

    f32 dVar14 = getMapScissorAreaCenterPosX() - local_8c;
    f32 dVar13 = getMapScissorAreaCenterPosY() - local_90;

    s32 uVar9 = field_0x1227;

    s32 local_94;
    if (field_0xfa0 == 0.0f) {
        local_94 = field_0x1226;
    } else {
        local_94 = field_0x1227;
    }

    if (g_fmapHIO.mDrawBackground == false) {
        return;
    }

    for (int iVar8 = 0; iVar8 < 8; iVar8++) {
        s32 uVar10 = field_0x1230[iVar8];
        if (uVar10 != 0xff && mpAreaTex[uVar10] != NULL) {
            f32 fVar3;
            if (isShowRegion(uVar10)) {
                if (uVar10 != local_94) {
                    mpAreaTex[uVar10]->setBlackWhite(field_0x11f8, field_0x11fc);
                    fVar3 = field_0x1214;

                } else {
                    mpAreaTex[uVar10]->setBlackWhite(field_0x11f0, field_0x11f4);
                    fVar3 = field_0x1210;
                }
            } else {
                mpAreaTex[uVar10]->setBlackWhite(field_0x1200, field_0x1204);
                fVar3 = 0.5f;
            }

            mpAreaTex[uVar10]->setAlpha(field_0xfc4 * 255.0f * fVar3 * field_0xfa4);

            if (uVar10 != uVar9) {
                mpAreaTex[uVar10]->draw(
                    field_0xfbc + (dVar14 + (field_0xe8c[uVar10] + field_0xf0c[uVar10])),
                    field_0xfc0 + (dVar13 + (field_0xeac[uVar10] + field_0xf2c[uVar10])),
                    field_0xecc[uVar10] * field_0xf9c, field_0xeec[uVar10] * field_0xf9c, false,
                    false, false);
            } else {
                mpAreaTex[uVar9]->draw(
                    field_0xfbc + (dVar14 + (field_0xe8c[uVar9] + field_0xf0c[uVar9])),
                    field_0xfc0 + (dVar13 + (field_0xeac[uVar9] + field_0xf2c[uVar9])),
                    field_0xecc[uVar9] * field_0xf9c, field_0xeec[uVar9] * field_0xf9c, false,
                    false, false);
            }
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::regionTextureDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/regionTextureDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D3094-801D31D0 1CD9D4 013C+00 1/1 0/0 0/0 .text stageTextureDraw__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Fmap2DBack_c::stageTextureDraw() {
    if (field_0x122f) {
        mpSpotTexture->setAlpha(field_0xfc4 * 255.0f * field_0x11d8);
    } else {
        f32 tmp = field_0xfc4 * 255.0f * field_0xfa8;
        mpSpotTexture->setAlpha(field_0x11d8 * tmp);
    }

    mpSpotTexture->draw(field_0xfbc + getMapScissorAreaLX(), field_0xfc0 + getMapScissorAreaLY(),
                        getMapScissorAreaSizeRealX(), getMapScissorAreaSizeRealY(), false, false,
                        false);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::stageTextureDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/stageTextureDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D31D0-801D34DC 1CDB10 030C+00 1/1 0/0 0/0 .text worldGridDraw__18dMenu_Fmap2DBack_cFv */
#ifdef NONMATCHING
// float regalloc
void dMenu_Fmap2DBack_c::worldGridDraw() {
    f32 local_74, local_78;

    f32 dVar9 = -field_0xfc8;
    f32 dVar8 = -field_0xfcc;
    calcAllMapPos2D(dVar9, dVar8, &local_74, &local_78);

    J2DDrawLine(local_74, mDoGph_gInf_c::getMinYF(), local_74,
                mDoGph_gInf_c::getMinYF() + mDoGph_gInf_c::getHeightF(),
                JUtility::TColor(255, 255, 255, 255), 6);

    f32 xPos = dVar9 - g_fmapHIO.mWorldGridWidth;
    while (true) {
        calcAllMapPos2D(xPos, dVar8, &local_74, &local_78);
        if (local_74 >= getMapScissorAreaLX()) {
            J2DDrawLine(local_74, mDoGph_gInf_c::getMinYF(), local_74,
                        mDoGph_gInf_c::getMinYF() + mDoGph_gInf_c::getHeightF(),
                        JUtility::TColor(255, 255, 255, 255), 6);
            xPos -= g_fmapHIO.mWorldGridWidth;
        } else {
            break;
        }
    }

    f32 xPos2 = dVar9 + g_fmapHIO.mWorldGridWidth;
    while (true) {
        calcAllMapPos2D(xPos2, dVar8, &local_74, &local_78);
        if (local_74 <= getMapScissorAreaLX() + getMapScissorAreaSizeRealX()) {
            J2DDrawLine(local_74, mDoGph_gInf_c::getMinYF(), local_74,
                        mDoGph_gInf_c::getMinYF() + mDoGph_gInf_c::getHeightF(),
                        JUtility::TColor(255, 255, 255, 255), 6);
            xPos2 += g_fmapHIO.mWorldGridWidth;
        } else {
            break;
        }
    }

    J2DDrawLine(mDoGph_gInf_c::getMinXF(), local_78,
                mDoGph_gInf_c::getMinXF() + mDoGph_gInf_c::getWidthF(), local_78,
                JUtility::TColor(255, 255, 255, 255), 6);

    f32 yPos = dVar8 - g_fmapHIO.mWorldGridWidth;
    while (true) {
        calcAllMapPos2D(dVar9, yPos, &local_74, &local_78);
        if (local_78 >= getMapScissorAreaLY()) {
            J2DDrawLine(mDoGph_gInf_c::getMinXF(), local_78,
                        mDoGph_gInf_c::getMinXF() + mDoGph_gInf_c::getWidthF(), local_78,
                        JUtility::TColor(255, 255, 255, 255), 6);
            yPos -= g_fmapHIO.mWorldGridWidth;
        } else {
            break;
        }
    }

    f32 yPos2 = dVar8 + g_fmapHIO.mWorldGridWidth;
    while (true) {
        calcAllMapPos2D(dVar9, yPos2, &local_74, &local_78);
        if (local_78 <= getMapScissorAreaLY() + getMapScissorAreaSizeRealY()) {
        J2DDrawLine(mDoGph_gInf_c::getMinXF(), local_78,
                    mDoGph_gInf_c::getMinXF() + mDoGph_gInf_c::getWidthF(), local_78,
                    JUtility::TColor(255, 255, 255, 255), 6);
        yPos2 += g_fmapHIO.mWorldGridWidth;
        }else{
            break;
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::worldGridDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/worldGridDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop
#endif

/* 801D34DC-801D382C 1CDE1C 0350+00 1/1 0/0 0/0 .text regionGridDraw__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::regionGridDraw(){nofralloc
#include "asm/d/menu/d_menu_fmap2D/regionGridDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454208-80454210 002808 0008+00 8/8 0/0 0/0 .sdata2          @4496 */
SECTION_SDATA2 static f64 lit_4496 = 4503601774854144.0 /* cast s32 to float */;

/* 80454210-80454214 002810 0004+00 1/1 0/0 0/0 .sdata2          @5133 */
SECTION_SDATA2 static f32 lit_5133 = -0.0f;

/* 80454214-80454218 002814 0004+00 1/1 0/0 0/0 .sdata2          @5134 */
SECTION_SDATA2 static f32 lit_5134 = -608.0f;

/* 801D382C-801D38FC 1CE16C 00D0+00 1/1 0/0 0/0 .text worldOriginDraw__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::worldOriginDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/worldOriginDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D38FC-801D3AF8 1CE23C 01FC+00 1/1 0/0 0/0 .text scrollAreaDraw__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::scrollAreaDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/scrollAreaDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D3AF8-801D3BBC 1CE438 00C4+00 1/1 0/0 0/0 .text regionOriginDraw__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::regionOriginDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/regionOriginDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D3BBC-801D3CB8 1CE4FC 00FC+00 1/1 0/0 0/0 .text stageOriginDraw__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::stageOriginDraw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/stageOriginDraw__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D3CB8-801D4928 1CE5F8 0C70+00 1/1 0/0 0/0 .text            calcBlink__18dMenu_Fmap2DBack_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcBlink(){nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcBlink__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454218-8045421C 002818 0004+00 1/1 0/0 0/0 .sdata2          @5433 */
SECTION_SDATA2 static f32 lit_5433 = 2.0f / 5.0f;

/* 8045421C-80454220 00281C 0004+00 1/1 0/0 0/0 .sdata2          @5434 */
SECTION_SDATA2 static f32 lit_5434 = 1.0f / 10.0f;

/* 801D4928-801D49E0 1CF268 00B8+00 0/0 1/1 0/0 .text calcBackAlpha__18dMenu_Fmap2DBack_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcBackAlpha(bool param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcBackAlpha__18dMenu_Fmap2DBack_cFb.s"
}
#pragma pop

/* 801D49E0-801D4AFC 1CF320 011C+00 0/0 1/1 0/0 .text btkAnimeLoop__18dMenu_Fmap2DBack_cFf */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::btkAnimeLoop(f32 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/btkAnimeLoop__18dMenu_Fmap2DBack_cFf.s"
}
#pragma pop

/* 801D4AFC-801D4B2C 1CF43C 0030+00 0/0 1/1 0/0 .text setBaseBackAlpha__18dMenu_Fmap2DBack_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setBaseBackAlpha(u8 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setBaseBackAlpha__18dMenu_Fmap2DBack_cFUc.s"
}
#pragma pop

/* 801D4B2C-801D4E80 1CF46C 0354+00 0/0 3/3 0/0 .text
 * regionMapMove__18dMenu_Fmap2DBack_cFP9STControl              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::regionMapMove(STControl* param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/regionMapMove__18dMenu_Fmap2DBack_cFP9STControl.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454220-80454224 002820 0004+00 1/1 0/0 0/0 .sdata2          @5568 */
SECTION_SDATA2 static f32 lit_5568 = -1.0f;

/* 801D4E80-801D5334 1CF7C0 04B4+00 0/0 1/1 0/0 .text
 * stageMapMove__18dMenu_Fmap2DBack_cFP9STControlUcb            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::stageMapMove(STControl* param_0, u8 param_1, bool param_2) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/stageMapMove__18dMenu_Fmap2DBack_cFP9STControlUcb.s"
}
#pragma pop

/* 801D5334-801D5388 1CFC74 0054+00 0/0 2/2 0/0 .text setAllAlphaRate__18dMenu_Fmap2DBack_cFfb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setAllAlphaRate(f32 param_0, bool param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAllAlphaRate__18dMenu_Fmap2DBack_cFfb.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454224-80454228 002824 0004+00 1/1 0/0 0/0 .sdata2          @5632 */
SECTION_SDATA2 static f32 lit_5632 = 304.0f;

/* 80454228-8045422C 002828 0004+00 1/1 0/0 0/0 .sdata2          @5633 */
SECTION_SDATA2 static f32 lit_5633 = 224.0f;

/* 801D5388-801D564C 1CFCC8 02C4+00 1/1 0/0 0/0 .text drawDebugStageArea__18dMenu_Fmap2DBack_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::drawDebugStageArea() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/drawDebugStageArea__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D564C-801D58F8 1CFF8C 02AC+00 1/1 0/0 0/0 .text drawDebugRegionArea__18dMenu_Fmap2DBack_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::drawDebugRegionArea() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/drawDebugRegionArea__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D58F8-801D59C0 1D0238 00C8+00 0/0 2/2 0/0 .text setArrowPos3D__18dMenu_Fmap2DBack_cFUcPCcff
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setArrowPos3D(u8 param_0, char const* param_1, f32 param_2,
                                           f32 param_3) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setArrowPos3D__18dMenu_Fmap2DBack_cFUcPCcff.s"
}
#pragma pop

/* 801D59C0-801D5AC4 1D0300 0104+00 0/0 1/1 0/0 .text
 * setArrowPos3DOffset__18dMenu_Fmap2DBack_cFUcPCcfff           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setArrowPos3DOffset(u8 param_0, char const* param_1, f32 param_2,
                                                 f32 param_3, f32 param_4) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setArrowPos3DOffset__18dMenu_Fmap2DBack_cFUcPCcfff.s"
}
#pragma pop

/* 801D5AC4-801D5BB8 1D0404 00F4+00 0/0 2/2 0/0 .text calcDrawPriority__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::calcDrawPriority() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/calcDrawPriority__18dMenu_Fmap2DBack_cFv.s"
}
#pragma pop

/* 801D5BB8-801D5BD0 1D04F8 0018+00 0/0 3/3 0/0 .text setArrowPosAxis__18dMenu_Fmap2DBack_cFff */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DBack_c::setArrowPosAxis(f32 param_0, f32 param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setArrowPosAxis__18dMenu_Fmap2DBack_cFff.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396288-803962A0 0228E8 0018+00 0/1 0/0 0/0 .rodata          area_name$5814 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const area_name[24] = {
    0x69,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x5F,
    0x73,
    0x00,
    0x00,
    0x69,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x00,
    0x69,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x31,
};
COMPILER_STRIP_GATE(0x80396288, &area_name);
#pragma pop

/* 803962A0-803962B8 022900 0018+00 0/1 0/0 0/0 .rodata          farea_name$5815 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const farea_name_5815[24] = {
    0x66, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x5F, 0x31, 0x00, 0x66, 0x5F, 0x6E,
    0x61, 0x6D, 0x65, 0x33, 0x00, 0x66, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x32,
};
COMPILER_STRIP_GATE(0x803962A0, &farea_name_5815);
#pragma pop

/* 803962B8-803962F0 022918 0038+00 0/1 0/0 0/0 .rodata          sfont_name$5821 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const sfont_name[56] = {
    0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x30, 0x30, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74,
    0x6C, 0x30, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x31, 0x00, 0x73, 0x66, 0x6F,
    0x6E, 0x74, 0x6C, 0x32, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x30, 0x00, 0x73,
    0x66, 0x6F, 0x6E, 0x74, 0x62, 0x31, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x32,
};
COMPILER_STRIP_GATE(0x803962B8, &sfont_name);
#pragma pop

/* 803962F0-80396328 022950 0038+00 0/1 0/0 0/0 .rodata          ffont_name$5822 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const ffont_name_5822[56] = {
    0x00, 0x66, 0x66, 0x6F, 0x6E, 0x74, 0x30, 0x30, 0x00, 0x66, 0x66, 0x6F, 0x6E, 0x74,
    0x6C, 0x30, 0x00, 0x66, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x31, 0x00, 0x66, 0x66, 0x6F,
    0x6E, 0x74, 0x6C, 0x32, 0x00, 0x66, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x30, 0x00, 0x66,
    0x66, 0x6F, 0x6E, 0x74, 0x62, 0x33, 0x00, 0x66, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x34,
};
COMPILER_STRIP_GATE(0x803962F0, &ffont_name_5822);
#pragma pop

/* 80396328-80396350 022988 0028+00 0/1 0/0 0/0 .rodata          cont_zt$5828 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const cont_zt[40] = {
    0x00, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x7A,
    0x74, 0x31, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x32, 0x63, 0x6F, 0x6E, 0x74,
    0x5F, 0x7A, 0x74, 0x33, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x34,
};
COMPILER_STRIP_GATE(0x80396328, &cont_zt);
#pragma pop

/* 80396350-80396378 0229B0 0028+00 0/1 0/0 0/0 .rodata          font_zt$5829 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const font_zt_5829[40] = {
    0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x31, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x7A,
    0x74, 0x32, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x33, 0x66, 0x6F, 0x6E, 0x74,
    0x5F, 0x7A, 0x74, 0x34, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x7A, 0x74, 0x35,
};
COMPILER_STRIP_GATE(0x80396350, &font_zt_5829);
#pragma pop

/* 80396378-803963A0 0229D8 0028+00 0/1 0/0 0/0 .rodata          cont_bt$5835 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const cont_bt[40] = {
    0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74, 0x31, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x62,
    0x74, 0x32, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74, 0x33, 0x63, 0x6F, 0x6E, 0x74,
    0x5F, 0x62, 0x74, 0x34, 0x00, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74,
};
COMPILER_STRIP_GATE(0x80396378, &cont_bt);
#pragma pop

/* 803963A0-803963C8 022A00 0028+00 0/1 0/0 0/0 .rodata          font_bt$5836 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const font_bt_5836[40] = {
    0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74, 0x31, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x62,
    0x74, 0x32, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74, 0x33, 0x66, 0x6F, 0x6E, 0x74,
    0x5F, 0x62, 0x74, 0x34, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x62, 0x74, 0x35,
};
COMPILER_STRIP_GATE(0x803963A0, &font_bt_5836);
#pragma pop

/* 803963C8-803963F0 022A28 0028+00 0/1 0/0 0/0 .rodata          cont_at$5842 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const cont_at[40] = {
    0x00, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x61,
    0x74, 0x31, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x32, 0x63, 0x6F, 0x6E, 0x74,
    0x5F, 0x61, 0x74, 0x33, 0x63, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x34,
};
COMPILER_STRIP_GATE(0x803963C8, &cont_at);
#pragma pop

/* 803963F0-80396418 022A50 0028+00 0/1 0/0 0/0 .rodata          font_at$5843 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const font_at_5843[40] = {
    0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x31, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x61,
    0x74, 0x32, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x33, 0x66, 0x6F, 0x6E, 0x74,
    0x5F, 0x61, 0x74, 0x34, 0x66, 0x6F, 0x6E, 0x74, 0x5F, 0x61, 0x74, 0x35,
};
COMPILER_STRIP_GATE(0x803963F0, &font_at_5843);
#pragma pop

/* 80396418-80396440 022A78 0028+00 0/1 0/0 0/0 .rodata          juji_c$5849 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const juji_c_5849[40] = {
    0x6A, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x30, 0x6A, 0x75, 0x6A, 0x69, 0x5F, 0x63,
    0x30, 0x31, 0x6A, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x32, 0x6A, 0x75, 0x6A, 0x69,
    0x5F, 0x63, 0x30, 0x33, 0x6A, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x34,
};
COMPILER_STRIP_GATE(0x80396418, &juji_c_5849);
#pragma pop

/* 80396440-80396468 022AA0 0028+00 0/1 0/0 0/0 .rodata          fuji_c$5850 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const fuji_c[40] = {
    0x66, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x30, 0x66, 0x75, 0x6A, 0x69, 0x5F, 0x63,
    0x30, 0x31, 0x66, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x32, 0x66, 0x75, 0x6A, 0x69,
    0x5F, 0x63, 0x30, 0x33, 0x66, 0x75, 0x6A, 0x69, 0x5F, 0x63, 0x30, 0x34,
};
COMPILER_STRIP_GATE(0x80396440, &fuji_c);
#pragma pop

/* 80396468-80396490 022AC8 0028+00 0/1 0/0 0/0 .rodata          ast_c$5856 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const ast_c_5856[40] = {
    0x00, 0x00, 0x61, 0x73, 0x74, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x61, 0x73, 0x74, 0x5F,
    0x30, 0x31, 0x00, 0x00, 0x61, 0x73, 0x74, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x61, 0x73,
    0x74, 0x5F, 0x30, 0x33, 0x00, 0x00, 0x61, 0x73, 0x74, 0x5F, 0x30, 0x34,
};
COMPILER_STRIP_GATE(0x80396468, &ast_c_5856);
#pragma pop

/* 80396490-803964B8 022AF0 0028+00 0/1 0/0 0/0 .rodata          fst_c$5857 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const fst_c[40] = {
    0x00, 0x00, 0x66, 0x73, 0x74, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x66, 0x73, 0x74, 0x5F,
    0x30, 0x31, 0x00, 0x00, 0x66, 0x73, 0x74, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x66, 0x73,
    0x74, 0x5F, 0x30, 0x33, 0x00, 0x00, 0x66, 0x73, 0x74, 0x5F, 0x30, 0x34,
};
COMPILER_STRIP_GATE(0x80396490, &fst_c);
#pragma pop

/* 803965D0-803965D0 022C30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396655 = "zelda_map_screen_title.blo";
SECTION_DEAD static char const* const stringBase_80396670 = "zelda_map_screen_title.btk";
SECTION_DEAD static char const* const stringBase_8039668B = "";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039668C = "\0\0\0";
#pragma pop

/* 801D5BD0-801D6700 1D0510 0B30+00 0/0 1/1 0/0 .text
 * __ct__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMenu_Fmap2DTop_c::dMenu_Fmap2DTop_c(JKRExpHeap* param_0, STControl* param_1) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/__ct__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl.s"
}
#pragma pop

/* 801D6700-801D6A44 1D1040 0344+00 1/0 0/0 0/0 .text            __dt__17dMenu_Fmap2DTop_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMenu_Fmap2DTop_c::~dMenu_Fmap2DTop_c() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/__dt__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D6A44-801D6C44 1D1384 0200+00 0/0 1/1 0/0 .text            _execute__17dMenu_Fmap2DTop_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::_execute() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/_execute__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D6C44-801D6C98 1D1584 0054+00 0/0 2/2 0/0 .text setAllAlphaRate__17dMenu_Fmap2DTop_cFfb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAllAlphaRate(f32 param_0, bool param_1) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAllAlphaRate__17dMenu_Fmap2DTop_cFfb.s"
}
#pragma pop

/* 801D6C98-801D6DF8 1D15D8 0160+00 1/0 0/0 0/0 .text            draw__17dMenu_Fmap2DTop_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::draw() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/draw__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D6DF8-801D6EDC 1D1738 00E4+00 0/0 1/1 0/0 .text
 * btkAnimeLoop__17dMenu_Fmap2DTop_cFP19J2DAnmTextureSRTKeyf    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::btkAnimeLoop(J2DAnmTextureSRTKey* param_0, f32 param_1) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/btkAnimeLoop__17dMenu_Fmap2DTop_cFP19J2DAnmTextureSRTKeyf.s"
}
#pragma pop

/* 801D6EDC-801D6F38 1D181C 005C+00 0/0 1/1 0/0 .text setMoyaAlpha__17dMenu_Fmap2DTop_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setMoyaAlpha(u8 param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setMoyaAlpha__17dMenu_Fmap2DTop_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 803964B8-803964F0 022B18 0038+00 1/1 0/0 0/0 .rodata          ffont_name$6110 */
SECTION_RODATA static u8 const ffont_name_6110[56] = {
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x30,
    0x30,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x6C,
    0x30,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x6C,
    0x31,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x6C,
    0x32,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x62,
    0x30,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x62,
    0x33,
    0x00,
    0x66,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x62,
    0x34,
};
COMPILER_STRIP_GATE(0x803964B8, &ffont_name_6110);

/* 801D6F38-801D7010 1D1878 00D8+00 1/1 1/1 0/0 .text setTitleNameString__17dMenu_Fmap2DTop_cFUl
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setTitleNameString(u32 param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setTitleNameString__17dMenu_Fmap2DTop_cFUl.s"
}
#pragma pop

/* ############################################################################################## */
/* 803964F0-80396508 022B50 0018+00 1/1 0/0 0/0 .rodata          farea_name$6125 */
SECTION_RODATA static u8 const farea_name_6125[24] = {
    0x66,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x5F,
    0x31,
    0x00,
    0x66,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x33,
    0x00,
    0x66,
    0x5F,
    0x6E,
    0x61,
    0x6D,
    0x65,
    0x32,
};
COMPILER_STRIP_GATE(0x803964F0, &farea_name_6125);

/* 801D7010-801D70E8 1D1950 00D8+00 0/0 2/2 0/0 .text setAreaNameString__17dMenu_Fmap2DTop_cFUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAreaNameString(u32 param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAreaNameString__17dMenu_Fmap2DTop_cFUl.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396508-80396530 022B68 0028+00 1/1 0/0 0/0 .rodata          font_zt$6148 */
SECTION_RODATA static u8 const font_zt_6148[40] = {
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x7A,
    0x74,
    0x31,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x7A,
    0x74,
    0x32,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x7A,
    0x74,
    0x33,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x7A,
    0x74,
    0x34,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x7A,
    0x74,
    0x35,
};
COMPILER_STRIP_GATE(0x80396508, &font_zt_6148);

/* 801D70E8-801D7210 1D1A28 0128+00 1/1 12/12 0/0 .text setZButtonString__17dMenu_Fmap2DTop_cFUlUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setZButtonString(u32 param_0, u8 param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setZButtonString__17dMenu_Fmap2DTop_cFUlUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396530-80396558 022B90 0028+00 1/1 0/0 0/0 .rodata          font_bt$6176 */
SECTION_RODATA static u8 const font_bt_6176[40] = {
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x62,
    0x74,
    0x31,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x62,
    0x74,
    0x32,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x62,
    0x74,
    0x33,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x62,
    0x74,
    0x34,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x62,
    0x74,
    0x35,
};
COMPILER_STRIP_GATE(0x80396530, &font_bt_6176);

/* 801D7210-801D72D4 1D1B50 00C4+00 1/1 9/9 0/0 .text setBButtonString__17dMenu_Fmap2DTop_cFUlUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setBButtonString(u32 param_0, u8 param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setBButtonString__17dMenu_Fmap2DTop_cFUlUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396558-80396580 022BB8 0028+00 1/1 0/0 0/0 .rodata          font_at$6194 */
SECTION_RODATA static u8 const font_at_6194[40] = {
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x61,
    0x74,
    0x31,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x61,
    0x74,
    0x32,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x61,
    0x74,
    0x33,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x61,
    0x74,
    0x34,
    0x66,
    0x6F,
    0x6E,
    0x74,
    0x5F,
    0x61,
    0x74,
    0x35,
};
COMPILER_STRIP_GATE(0x80396558, &font_at_6194);

/* 801D72D4-801D7398 1D1C14 00C4+00 1/1 14/14 0/0 .text setAButtonString__17dMenu_Fmap2DTop_cFUlUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAButtonString(u32 param_0, u8 param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAButtonString__17dMenu_Fmap2DTop_cFUlUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396580-803965A8 022BE0 0028+00 1/1 0/0 0/0 .rodata          juji_c$6209 */
SECTION_RODATA static u8 const juji_c_6209[40] = {
    0x66,
    0x75,
    0x6A,
    0x69,
    0x5F,
    0x63,
    0x30,
    0x30,
    0x66,
    0x75,
    0x6A,
    0x69,
    0x5F,
    0x63,
    0x30,
    0x31,
    0x66,
    0x75,
    0x6A,
    0x69,
    0x5F,
    0x63,
    0x30,
    0x32,
    0x66,
    0x75,
    0x6A,
    0x69,
    0x5F,
    0x63,
    0x30,
    0x33,
    0x66,
    0x75,
    0x6A,
    0x69,
    0x5F,
    0x63,
    0x30,
    0x34,
};
COMPILER_STRIP_GATE(0x80396580, &juji_c_6209);

/* 801D7398-801D74EC 1D1CD8 0154+00 1/1 8/8 0/0 .text setCrossLRString__17dMenu_Fmap2DTop_cFUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setCrossLRString(u32 param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setCrossLRString__17dMenu_Fmap2DTop_cFUl.s"
}
#pragma pop

/* ############################################################################################## */
/* 803965A8-803965D0 022C08 0028+00 1/1 0/0 0/0 .rodata          ast_c$6233 */
SECTION_RODATA static u8 const ast_c_6233[40] = {
    0x00,
    0x00,
    0x66,
    0x73,
    0x74,
    0x5F,
    0x30,
    0x30,
    0x00,
    0x00,
    0x66,
    0x73,
    0x74,
    0x5F,
    0x30,
    0x31,
    0x00,
    0x00,
    0x66,
    0x73,
    0x74,
    0x5F,
    0x30,
    0x32,
    0x00,
    0x00,
    0x66,
    0x73,
    0x74,
    0x5F,
    0x30,
    0x33,
    0x00,
    0x00,
    0x66,
    0x73,
    0x74,
    0x5F,
    0x30,
    0x34,
};
COMPILER_STRIP_GATE(0x803965A8, &ast_c_6233);

/* 801D74EC-801D7640 1D1E2C 0154+00 1/1 10/10 0/0 .text set3DStickString__17dMenu_Fmap2DTop_cFUl
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::set3DStickString(u32 param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/set3DStickString__17dMenu_Fmap2DTop_cFUl.s"
}
#pragma pop

/* 801D7640-801D76C0 1D1F80 0080+00 0/0 5/5 0/0 .text
 * createExplain__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::createExplain(JKRExpHeap* param_0, STControl* param_1) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/createExplain__17dMenu_Fmap2DTop_cFP10JKRExpHeapP9STControl.s"
}
#pragma pop

/* 801D76C0-801D7714 1D2000 0054+00 1/1 2/2 0/0 .text deleteExplain__17dMenu_Fmap2DTop_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::deleteExplain() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/deleteExplain__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D7714-801D77C4 1D2054 00B0+00 0/0 12/12 0/0 .text
 * setArrowAlphaRatio__17dMenu_Fmap2DTop_cFUcf                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setArrowAlphaRatio(u8 param_0, f32 param_1){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setArrowAlphaRatio__17dMenu_Fmap2DTop_cFUcf.s"
}
#pragma pop

/* ############################################################################################## */
/* 8045422C-80454230 00282C 0004+00 2/2 0/0 0/0 .sdata2          @6309 */
SECTION_SDATA2 static f32 lit_6309 = 5.0f;

/* 801D77C4-801D7858 1D2104 0094+00 1/1 0/0 0/0 .text
 * setAlphaAnimeMin__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAlphaAnimeMin(CPaneMgrAlpha* param_0){nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAlphaAnimeMin__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454230-80454238 002830 0004+04 1/1 0/0 0/0 .sdata2          @6325 */
SECTION_SDATA2 static f32 lit_6325[1 + 1 /* padding */] = {
    0.25f,
    /* padding */
    0.0f,
};

/* 801D7858-801D78FC 1D2198 00A4+00 1/1 0/0 0/0 .text
 * setAlphaAnimeMid__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAlphaAnimeMid(CPaneMgrAlpha* param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAlphaAnimeMid__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha.s"
}
#pragma pop

/* 801D78FC-801D7994 1D223C 0098+00 1/1 0/0 0/0 .text
 * setAlphaAnimeMax__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setAlphaAnimeMax(CPaneMgrAlpha* param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setAlphaAnimeMax__17dMenu_Fmap2DTop_cFP13CPaneMgrAlpha.s"
}
#pragma pop

/* 801D7994-801D7A08 1D22D4 0074+00 1/1 3/3 0/0 .text checkPlayerWarpAccept__17dMenu_Fmap2DTop_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::checkPlayerWarpAccept() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/checkPlayerWarpAccept__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D7A08-801D7AB4 1D2348 00AC+00 1/1 0/0 0/0 .text checkWarpAcceptRegion__17dMenu_Fmap2DTop_cFi
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::checkWarpAcceptRegion(int param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/checkWarpAcceptRegion__17dMenu_Fmap2DTop_cFi.s"
}
#pragma pop

/* 801D7AB4-801D7B58 1D23F4 00A4+00 1/1 3/3 0/0 .text
 * checkWarpAcceptRegion4__17dMenu_Fmap2DTop_cFv                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::checkWarpAcceptRegion4() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/checkWarpAcceptRegion4__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D7B58-801D7BCC 1D2498 0074+00 1/1 3/3 0/0 .text checkWarpAcceptCannon__17dMenu_Fmap2DTop_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::checkWarpAcceptCannon() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/checkWarpAcceptCannon__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D7BCC-801D8088 1D250C 04BC+00 2/2 0/0 0/0 .text            setHIO__17dMenu_Fmap2DTop_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::setHIO(bool param_0) {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/setHIO__17dMenu_Fmap2DTop_cFb.s"
}
#pragma pop

/* 801D8088-801D810C 1D29C8 0084+00 1/1 3/3 0/0 .text            isWarpAccept__17dMenu_Fmap2DTop_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Fmap2DTop_c::isWarpAccept() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/isWarpAccept__17dMenu_Fmap2DTop_cFv.s"
}
#pragma pop

/* 801D810C-801D8114 1D2A4C 0008+00 1/0 0/0 0/0 .text            @4@__dt__18dMenu_Fmap2DBack_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void func_801D810C() {
    nofralloc
#include "asm/d/menu/d_menu_fmap2D/func_801D810C.s"
}
#pragma pop

/* 803965D0-803965D0 022C30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
